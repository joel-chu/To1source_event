{"version":3,"file":"to1source-event.umd.js","sources":["../src/constants.js","../src/store.js","../src/suspend.js","../src/event-service.js","../src/store-service.js","../src/hash-code.js"],"sourcesContent":["// group all the repetitive message here\n\nexport const TAKEN_BY_OTHER_TYPE_ERR = 'You are trying to register an event already been taken by other type:'\n","// Create two WeakMap store as a private keys\nexport const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n/*\nwe use a different way to do the same watch thing now\nthis.watch('suspend', function(value, prop, oldValue) {\n  this.logger(`${prop} set from ${oldValue} to ${value}`)\n  // it means it set the suspend = true then release it\n  if (oldValue === true && value === false) {\n    // we want this happen after the return happens\n    setTimeout(() => {\n      this.release()\n    }, 1)\n  }\n  return value; // we need to return the value to store it\n})\n*/\n\nexport default class SuspendClass {\n\n  constructor() {\n    // suspend, release and queue\n    this.__suspend_state__ = null\n    // to do this proper we don't use a new prop to hold the event name pattern\n    this.__pattern__ = null\n    this.queueStore = new Set()\n  }\n\n  /**\n   * start suspend\n   * @return {void}\n   */\n  $suspend() {\n    this.logger(`---> SUSPEND ALL OPS <---`)\n    this.__suspend__(true)\n  }\n\n  /**\n   * release the queue\n   * @return {void}\n   */\n  $release() {\n    this.logger(`---> RELEASE SUSPENDED QUEUE <---`)\n    this.__suspend__(false)\n  }\n\n  /**\n   * suspend event by pattern\n   * @param {string} pattern the pattern search matches the event name\n   * @return {void}\n   */\n  $suspendEvent(pattern) {\n    if (pattern && typeof pattern === 'string') {\n      this.__pattern__ = pattern\n      this.$suspend()\n    }\n    throw new Error(`We expect a pattern variable to be string, but got ${typeof pattern}`)\n  }\n\n  /**\n   * queuing call up when it's in suspend mode\n   * @param {string} evt the event name\n   * @param {*} args unknown number of arguments\n   * @return {boolean} true when added or false when it's not\n   */\n  $queue(evt, ...args) {\n    this.logger('($queue) get called')\n    if (this.__suspend_state__ === true) {\n      if (this.__pattern__ !== null) {\n        // check the pattern and decide if we want to suspend it or not\n        let found = evt.indexOf(this.__pattern__) > -1\n        if (!found) {\n          return false\n        }\n      }\n      this.logger('($queue) added to $queue', args)\n      // @TODO there shouldn't be any duplicate, but how to make sure?\n      this.queueStore.add([evt].concat(args))\n      // return this.queueStore.size\n    }\n    return !!this.__suspend_state__\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size\n    this.logger('($queues)', `size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   */\n  __suspend__(value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.__suspend_state__\n      this.__suspend_state__ = value\n      this.logger(`($suspend) Change from \"${lastValue}\" --> \"${value}\"`)\n      if (lastValue === true && value === false) {\n        this.__release__()\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value! we got ${typeof value}`)\n    }\n  }\n\n  /**\n   * Release the queue\n   * @return {int} size if any\n   */\n  __release__() {\n    let size = this.queueStore.size\n    let pattern = this.__pattern__\n    this.__pattern__ = null\n    this.logger('(release)', `Release was called with ${size}${pattern ? ' for \"' + pattern + '\"': ''} item${size > 1 ? 's' : ''}`)\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.queueStore.clear()\n      this.logger('(release queue)', queue)\n      queue.forEach(args => {\n        this.logger(args)\n        Reflect.apply(this.$trigger, this, args)\n      })\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n\n    return size\n  }\n}\n","// The top level\nimport { TAKEN_BY_OTHER_TYPE_ERR } from './constants'\nimport NbStoreService from './store-service'\n// export\nexport default class EventService extends NbStoreService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on'\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger(`($on) \"${evt}\" is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger(`($on) ${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($on)`, `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n\n    this.logger(`($on) return size ${size}`)\n    return size\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n    const type = 'once'\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (lazyStoreContent === false) {\n      this.logger(`($once) \"${evt}\" is not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, type, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger('($once)', `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'only'\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n    if (!nStore.has(evt)) {\n      this.logger(`($only) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger(`($only) \"${evt}\" found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( li => {\n        const [ payload, ctx, t ] = li\n        if (t && t !== type) {\n          throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n        }\n        this.logger(`($only) call run \"${evt}\"`)\n        this.run(callback, payload, context || ctx)\n      })\n    }\n    return added\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD added in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'onlyOnce'\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== 'onlyOnce') {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($onlyOnce) call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {*}\n   */\n  $replace(evt, callback, context = null, type = 'on') {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n      this.logger(`($replace)`, evt, callback)\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0\n    // first check the normal store\n    let nStore = this.normalStore\n    this.logger('($trigger) normalStore', nStore)\n    if (nStore.has(evt)) {\n      this.logger(`($trigger) \"${evt}\" found`)\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      if (added) {\n        this.logger(`($trigger) Currently suspended \"${evt}\" added to queue, nothing executed. Exit now.`)\n        return false // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length\n      let hasOnce = false\n      let hasOnly = false\n      for (let i=0; i < ctn; ++i) {\n        ++found;\n        // this.logger('found', found)\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.logger(`($trigger) call run for ${evt}`)\n        this.run(callback, payload, context || ctx)\n        if (type === 'once' || type === 'onlyOnce') {\n          hasOnce = true;\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter aroun\n   * @NOTE breaking change: v1.9.1 it return an function to accept the params as spread\n   * @param {string} evt event name\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, type = false, context = null) {\n    const ctx = this\n\n    return (...args) => {\n      let _args = [evt, args, context, type]\n      return Reflect.apply(ctx.$trigger, ctx, _args)\n    }\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    // @TODO we will allow a regex pattern to mass remove event\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n\n    return !!stores\n          .filter(store => store.has(evt))\n          .map(store => this.removeFromStore(evt, store))\n          .length\n  }\n\n  /**\n   * return all the listener bind to that event name\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    // @TODO should we allow the same Regex to search for all?\n    this.validateEvt(evt)\n    let store = this.normalStore\n    return findFromStore(store)\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('($done) set value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    this.logger('($done) get result:', this.result)\n    if (this.keep) {\n      return this.result[this.result.length - 1]\n    }\n    return this.result\n  }\n\n  /**\n   * Take a look inside the stores\n   * @param {number|null} idx of the store, null means all\n   * @return {void}\n   */\n  $debug(idx = null) {\n    let names = ['lazyStore', 'normalStore']\n    let stores = [this.lazyStore, this.normalStore]\n    if (stores[idx]) {\n      this.logger(names[idx], stores[idx])\n    } else {\n      stores.map((store, i) => {\n        this.logger(names[i], store)\n      })\n    }\n  }\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport { hashCode2Str } from './hash-code'\nimport SuspendClass from './suspend'\n\nexport default class To1sourceEventBase extends SuspendClass {\n\n  constructor(config = {}) {\n    super()\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger\n    }\n    this.keep = config.keep\n    // for the $done setter\n    this.result = config.keep ? [] : null\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  // for id if the instance is this class\n  get is() {\n    return 'nb-event-service'\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(...evt) {\n    evt.forEach(e => {\n      if (typeof e !== 'string') {\n        this.logger('(validateEvt)', e)\n        throw new Error(`Event name must be string type! we got ${typeof e}`)\n      }\n    })\n    return true\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true\n      }\n    }\n    throw new Error(`callback required to be function type! we got ${typeof callback}`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    const _type = (type+'').toLowerCase()\n    const types = ['on', 'only', 'once', 'onlyOnce']\n    return !!types.filter(t => _type === t).length\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('(run) callback:', callback, 'payload:', payload, 'context:', ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName] // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger(`(takeFromStore) has \"${evt}\"`, content)\n        store.delete(evt)\n        return content\n      }\n      return false\n    }\n    throw new Error(`\"${storeName}\" is not supported!`)\n  }\n\n  /**\n   * This was part of the $get. We take it out\n   * so we could use a regex to remove more than one event\n   * @param {object} store the store to return from\n   * @param {string} evt event name\n   * @return {array|boolean} false when not found\n   */\n  findFromStore(evt, store) {\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l\n          }\n          let [key, callback, ] = l\n          return callback\n        })\n    }\n    return false\n  }\n\n  /**\n   * Similar to the findFromStore, but remove\n   * @param {string} evt event name\n   * @param {object} store the store to remove from\n   * @return {boolean} false when not found\n   */\n  removeFromStore(evt, store) {\n    if (store.has(evt)) {\n      this.logger('($off)', evt)\n      store.delete(evt)\n    return true\n    }\n    return false\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet\n    if (store.has(evt)) {\n      this.logger(`(addToStore) \"${evt}\" existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger(`(addToStore) create new Set for \"${evt}\"`)\n      // this is new\n      fnSet = new Set()\n    }\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger(`(addToStore) insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(li => {\n      let [hash,] = li\n      return hash === args[0]\n    }).length\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n      // pristine it means you can add\n      return true\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list\n      return type !== t\n    }).length\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let store = this.lazyStore.get(evtName)\n    this.logger('(checkTypeInLazyStore)', store)\n    if (store) {\n      return !!Array\n        .from(store)\n        .filter(li => {\n          let [,,t] = li\n          return t !== type\n        }).length\n    }\n    return false\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger(`(addToNormalStore) try to add \"${type}\" --> \"${evt}\" to normal store`)\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger('(addToNormalStore)', `\"${type}\" --> \"${evt}\" can add to normal store`)\n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store\n      return size\n    }\n    return false\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store\n    this.logger(`(addToLazyStore) size: ${size}`)\n    return size\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg]\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return hashCode2Str(fn.toString())\n  }\n}\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n// wrapper to make sure it string \nexport function hashCode2Str(s) {\n  return hashCode(s) + ''\n}\n"],"names":["const","TAKEN_BY_OTHER_TYPE_ERR","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","SuspendClass","this","__suspend_state__","__pattern__","queueStore","Set","$suspend","logger","__suspend__","$release","$suspendEvent","pattern","Error","$queue","evt","let","found","indexOf","args","add","concat","prototypeAccessors","$queues","size","Array","from","value","lastValue","__release__","queue","clear","forEach","Reflect","apply","$trigger","config","super","$on","callback","context","validate","lazyStoreContent","takeFromStore","addToNormalStore","content","t","run","payload","ctx","$once","normalStore","$off","$only","added","has","li","$onlyOnce","$replace","type","validateType","method","validateEvt","nStore","nSet","get","ctn","length","hasOnce","i","delete","addToLazyStore","$call","_args","lazyStore","filter","store","map","removeFromStore","$get","full","findFromStore","$done","keep","result","push","$debug","idx","names","stores","Map","is","e","_type","toLowerCase","toArray","storeName","l","addToStore","fnSet","isArray","checkTypeInLazyStore","checkContentExist","set","checkTypeInStore","evtName","all","list","key","hashFnToKey","_store","arg","obj","fn","s","split","reduce","a","b","charCodeAt","hashCode","toString"],"mappings":"qMAEOA,IAAMC,EAA0B,wECD1BC,EAAiC,IAAIC,QACrCC,EAAgC,IAAID,QCelC,IAAME,EAEnB,WAEEC,KAAKC,kBAAoB,KAEzBD,KAAKE,YAAc,KACnBF,KAAKG,WAAa,IAAIC,0CAO1BL,YAAEM,oBACEL,KAAKM,OAAO,gCACZN,KAAKO,aAAY,IAOrBR,YAAES,oBACER,KAAKM,OAAO,wCACZN,KAAKO,aAAY,IAQrBR,YAAEU,uBAAcC,GAKd,MAJMA,GAA8B,iBAAZA,IACpBV,KAAKE,YAAcQ,EACrBV,KAAOK,YAED,IAAIM,mEAAmED,IASjFX,YAAEa,gBAAOC,iEAEL,GADAb,KAAKM,OAAO,wBACmB,IAA3BN,KAAKC,kBAA4B,CACnC,GAAyB,OAArBD,KAAKE,YAAsB,CAE7BY,IAAIC,EAAQF,EAAIG,QAAQhB,KAAKE,cAAgB,EAC/C,IAAOa,EACH,OAAO,EAGXf,KAAKM,OAAO,2BAA4BW,GAExCjB,KAAKG,WAAWe,IAAI,CAACL,GAAKM,OAAOF,IAGnC,QAASjB,KAAKC,mBAOlBmB,EAAMC,uBACJ,IAAMC,EAAOtB,KAAKG,WAAWmB,KAE3B,OADFtB,KAAOM,OAAO,qBAAsBgB,GAC9BA,EAAO,EACFC,MAAMC,KAAKxB,KAAKG,YAElB,IAOXJ,YAAEQ,qBAAYkB,GACV,GAAqB,kBAAVA,EAQX,MAAQ,IAAId,2DAA2Dc,GAPrE/B,IAAMgC,EAAY1B,KAAKC,kBACvBD,KAAKC,kBAAoBwB,EAC3BzB,KAAOM,kCAAkCoB,eAAmBD,QACxC,IAAdC,IAAgC,IAAVD,GAC1BzB,KAAO2B,eAWb5B,YAAE4B,kCACML,EAAOtB,KAAKG,WAAWmB,KACvBZ,EAAUV,KAAKE,YAGnB,GAFAF,KAAKE,YAAc,KACrBF,KAAOM,OAAO,uCAAwCgB,GAAOZ,EAAU,SAAWA,EAAU,IAAK,aAAUY,EAAO,EAAI,IAAM,KACtHA,EAAO,EAAG,CACd,IAAQM,EAAQL,MAAMC,KAAKxB,KAAKG,YAC9BH,KAAKG,WAAW0B,QAChB7B,KAAKM,OAAO,kBAAmBsB,GAC/BA,EAAME,kBAAQb,GACZjB,EAAKM,OAAOW,GACdc,QAAUC,MAAMhC,EAAKiC,SAAUjC,EAAMiB,MAEvCjB,KAAOM,uBAAuBN,KAAKG,WAAe,MAGlD,OAAOmB,sDC5HT,WAAYY,kBAAS,IACnBC,YAAMD,6IAMR5B,gCAcA8B,aAAIvB,EAAMwB,EAAWC,6BAAU,MAE7BtC,KAAKuC,SAAS1B,EAAKwB,GAEnBvB,IAAI0B,EAAmBxC,KAAKyC,cAAc5B,GAE1C,IAAyB,IAArB2B,EAKF,OAJAxC,KAAKM,iBAAiBO,4BAIfb,KAAK0C,iBAAiB7B,EAVlB,KAU6BwB,EAAUC,GAEpDtC,KAAKM,gBAAgBO,0BAErBC,IAAIQ,EAAO,EAYX,OAXAkB,EAAiBV,kBAAQa,GACvB,yBACA,GAAIC,GAjBO,OAiBFA,EACP,MAAM,IAAIjC,MAAShB,MAA2BiD,GAEhD5C,EAAKM,OAAO,qBAAsBO,OAClCb,EAAK6C,IAAIR,EAAUS,EAASR,GAAWS,GACvCzB,GAAQtB,EAAK0C,iBAAiB7B,EAtBnB,KAsB8BwB,EAAUC,GAAWS,MAGhE/C,KAAKM,4BAA4BgB,GAC1BA,eAYT0B,eAAMnC,EAAMwB,EAAWC,kBAAU,MAC/BtC,KAAKuC,SAAS1B,EAAKwB,GACnB3C,IACI8C,EAAmBxC,KAAKyC,cAAc5B,GAE7Bb,KAAKiD,YAClB,IAAyB,IAArBT,EAGF,OAFAxC,KAAKM,mBAAmBO,gCAEjBb,KAAK0C,iBAAiB7B,EAPlB,OAO6BwB,EAAUC,GAOlDtC,KAAKM,OAAO,UAAWkC,GACvB9C,MAAa6B,MAAMC,KAAKgB,GAES,wBACjC,GAAII,GAlBO,SAkBFA,EACP,MAAM,IAAIjC,MAAShB,MAA2BiD,GAEhD5C,KAAKM,OAAO,uBAAwBO,OACpCb,KAAK6C,IAAIR,EAAUS,EAASR,GAAWS,GAEvC/C,KAAKkD,KAAKrC,gBAWdsC,eAAMtC,EAAKwB,EAAUC,6BAAU,MAC7BtC,KAAKuC,SAAS1B,EAAKwB,GACnB3C,IACI0D,GAAQ,EACRZ,EAAmBxC,KAAKyC,cAAc5B,IAE7Bb,KAAKiD,YACNI,IAAIxC,KACdb,KAAKM,mBAAmBO,0BACxBuC,EAAQpD,KAAK0C,iBAAiB7B,EAPnB,OAO8BwB,EAAUC,KAE5B,IAArBE,KAEFxC,KAAKM,mBAAmBO,2CACXU,MAAMC,KAAKgB,GAEnBV,kBAASwB,GACZ,yBACA,GAAIV,GAhBK,SAgBAA,EACP,MAAM,IAAIjC,MAAShB,MAA2BiD,GAEhD5C,EAAKM,4BAA4BO,OACjCb,EAAK6C,IAAIR,EAAUS,EAASR,GAAWS,OAG3C,OAAOK,eAWTG,mBAAU1C,EAAKwB,EAAUC,kBAAU,MACjCtC,KAAKuC,SAAS1B,EAAKwB,GACnB3C,IACI0D,GAAQ,EACRZ,EAAmBxC,KAAKyC,cAAc5B,GAO1C,GALab,KAAKiD,YACNI,IAAIxC,KACdb,KAAKM,uBAAuBO,0BAC5BuC,EAAQpD,KAAK0C,iBAAiB7B,EAPnB,WAO8BwB,EAAUC,KAE5B,IAArBE,EAA4B,CAE9BxC,KAAKM,OAAO,cAAekC,GAC3B9C,MAAa6B,MAAMC,KAAKgB,GAES,wBACjC,GAAII,GAAW,aAANA,EACP,MAAM,IAAIjC,MAAShB,MAA2BiD,GAEhD5C,KAAKM,gCAAgCO,OACrCb,KAAK6C,IAAIR,EAAUS,EAASR,GAAWS,GAEvC/C,KAAKkD,KAAKrC,GAEZ,OAAOuC,eAWTI,kBAAS3C,EAAKwB,EAAUC,EAAgBmB,GACtC,kBADgC,qBAAa,MACzCzD,KAAK0D,aAAaD,GAAO,CAC3BzD,KAAKkD,KAAKrC,GACVC,IAAI6C,EAAS3D,KAAK,IAAMyD,GAExB,OADAzD,KAAKM,OAAO,aAAcO,EAAKwB,GACxBN,QAAQC,MAAM2B,EAAQ3D,KAAM,CAACa,EAAKwB,EAAUC,IAErD,MAAM,IAAI3B,MAAS8C,qCAWrBxB,kBAASpB,EAAMiC,EAAeR,EAAgBmB,kBAArB,mBAAe,sBAAa,GACnDzD,KAAK4D,YAAY/C,GACjBC,IAAIC,EAAQ,EAER8C,EAAS7D,KAAKiD,YAElB,GADAjD,KAAKM,OAAO,yBAA0BuD,GAClCA,EAAOR,IAAIxC,GAAM,CAInB,GAHAb,KAAKM,sBAAsBO,aAEfb,KAAKY,OAAOC,EAAKiC,EAASR,EAASmB,GAG7C,OADAzD,KAAKM,0CAA0CO,oDACxC,EAMT,IAJAC,IAAIgD,EAAOvC,MAAMC,KAAKqC,EAAOE,IAAIlD,IAC7BmD,EAAMF,EAAKG,OACXC,GAAU,EAELC,EAAE,EAAGA,EAAIH,IAAOG,EAAG,GACxBpD,EAEF,MAAiC+C,EAAKK,+BACtCnE,KAAKM,kCAAkCO,GACvCb,KAAK6C,IAAIR,EAAUS,EAASR,GAAWS,GAC1B,SAATU,GAA4B,aAATA,IACrBS,GAAU,GAMd,OAHIA,GACFL,EAAOO,OAAOvD,GAETE,EAIT,OADAf,KAAKqE,eAAexD,EAAKiC,EAASR,EAASmB,GACpC1C,eAYTuD,eAAMzD,EAAK4C,EAAcnB,mBAAP,kBAAiB,MACjC5C,IAAMqD,EAAM/C,KAEZ,yEACEc,IAAIyD,EAAQ,CAAC1D,EAAKI,EAAMqB,EAASmB,GACjC,OAAO1B,QAAQC,MAAMe,EAAId,SAAUc,EAAKwB,iBAS5CrB,cAAKrC,cAKH,OAHAb,KAAK4D,YAAY/C,KACJ,CAAEb,KAAKwE,UAAWxE,KAAKiD,aAG7BwB,iBAAOC,UAASA,EAAMrB,IAAIxC,MAC1B8D,cAAID,UAAS1E,EAAK4E,gBAAgB/D,EAAK6D,MACvCT,oBASTY,cAAKhE,EAAKiE,GAER9E,KAAK4D,YAAY/C,GACjBC,IAAI4D,EAAQ1E,KAAKiD,YACjB,OAAO8B,cAAcL,IAOvBtD,EAAI4D,mBAAMvD,GACRzB,KAAKM,OAAO,sBAAuBmB,GAC/BzB,KAAKiF,KACPjF,KAAKkF,OAAOC,KAAK1D,GAEjBzB,KAAKkF,OAASzD,GASlBL,EAAI4D,qBAEF,OADAhF,KAAKM,OAAO,sBAAuBN,KAAKkF,QACpClF,KAAKiF,KACAjF,KAAKkF,OAAOlF,KAAKkF,OAAOjB,OAAS,GAEnCjE,KAAKkF,oBAQdE,gBAAOC,6BAAM,MACXvE,IAAIwE,EAAQ,CAAC,YAAa,eACtBC,EAAS,CAACvF,KAAKwE,UAAWxE,KAAKiD,aAC/BsC,EAAOF,GACTrF,KAAKM,OAAOgF,EAAMD,GAAME,EAAOF,IAE/BE,EAAOZ,cAAKD,EAAOP,GACjBnE,EAAKM,OAAOgF,EAAMnB,GAAIO,6DCpT5B,WAAYxC,kBAAS,IACnBC,aACID,EAAO5B,QAAmC,mBAAlB4B,EAAO5B,SACjCN,KAAKM,OAAS4B,EAAO5B,QAEvBN,KAAKiF,KAAO/C,EAAO+C,KAEnBjF,KAAKkF,OAAShD,EAAO+C,KAAO,GAAK,KAEjCjF,KAAKiD,YAAc,IAAIuC,IACvBxF,KAAKwE,UAAY,IAAIgB,yLAIvBpE,EAAIqE,kBACF,MAAO,gCAQT7B,qFAOE,OANA/C,EAAIiB,kBAAQ4D,GACV,GAAiB,iBAANA,EAET,MADA1F,EAAKM,OAAO,gBAAiBoF,GACvB,IAAI/E,uDAAuD+E,OAG9D,eASTnD,kBAAS1B,EAAKwB,GACZ,GAAIrC,KAAK4D,YAAY/C,IACK,mBAAbwB,EACT,OAAO,EAGX,MAAM,IAAI1B,8DAA8D0B,gBAQ1EqB,sBAAaD,GACX/D,IAAMiG,GAASlC,EAAK,IAAImC,cAExB,QADc,CAAC,KAAM,OAAQ,OAAQ,YACtBnB,iBAAO7B,UAAK+C,IAAU/C,KAAGqB,oBAU1CpB,aAAIR,EAAUS,EAASC,GACrB/C,KAAKM,OAAO,kBAAmB+B,EAAU,WAAYS,EAAS,WAAYC,GAC1E/C,KAAKgF,MAAQjD,QAAQC,MAAMK,EAAUU,EAAK/C,KAAK6F,QAAQ/C,iBASzDL,uBAAc5B,EAAKiF,kBAAY,aAC7BhF,IAAI4D,EAAQ1E,KAAK8F,GACjB,GAAIpB,EAAO,CAET,GADA1E,KAAKM,OAAO,kBAAmBwF,EAAWpB,GACtCA,EAAMrB,IAAIxC,GAAM,CAClBC,IAAI6B,EAAU+B,EAAMX,IAAIlD,GAGxB,OAFAb,KAAKM,+BAA+BO,MAAQ8B,GAC5C+B,EAAMN,OAAOvD,GACN8B,EAET,OAAO,EAET,MAAM,IAAIhC,UAAUmF,sCAUtBf,uBAAclE,EAAK6D,GACjB,QAAIA,EAAMrB,IAAIxC,IACLU,MACJC,KAAKkD,EAAMX,IAAIlD,IACf8D,cAAKoB,GACJ,GAAIjB,KACF,OAAOiB,OAGT,4BAYRnB,yBAAgB/D,EAAK6D,GACnB,QAAIA,EAAMrB,IAAIxC,KACZb,KAAKM,OAAO,SAAUO,GACtB6D,EAAMN,OAAOvD,IACR,gBAYTmF,oBAAWtB,EAAO7D,WACZoF,wDAWJ,GAVIvB,EAAMrB,IAAIxC,IACZb,KAAKM,wBAAwBO,eAC7BoF,EAAQvB,EAAMX,IAAIlD,KAElBb,KAAKM,2CAA2CO,OAEhDoF,EAAQ,IAAI7F,KAIVa,EAAKgD,OAAS,EAChB,GAAI1C,MAAM2E,QAAQjF,EAAK,IAAK,CAEnB,WACFjB,KAAKmG,qBAAqBtF,EAAK+B,IAClCqD,EAAM/E,IAAID,QAGPjB,KAAKoG,kBAAkBnF,EAAMgF,KAChCjG,KAAKM,OAAO,0BAA2BW,GACvCgF,EAAM/E,IAAID,SAIdgF,EAAM/E,IAAID,GAGZ,OADAyD,EAAM2B,IAAIxF,EAAKoF,GACR,CAACvB,EAAOuB,EAAM3E,mBAQvB8E,2BAAkBnF,EAAMgF,GAEtB,QADW1E,MAAMC,KAAKyE,GACRxB,iBAAOnB,GAEnB,cAAgBrC,EAAK,MACpBgD,oBASLqC,0BAAiBC,EAAS9C,GACxBzD,KAAK4D,YAAY2C,EAAS9C,GAC1B3C,IAAI0F,EAAMxG,KAAK6E,KAAK0B,GAAS,GAC7B,OAAY,IAARC,IAKIA,EAAI/B,iBAAOgC,GACR,WACT,OAAOhD,IAASb,KACfqB,oBAOLkC,8BAAqBI,EAAS9C,GAC5BzD,KAAK4D,YAAY2C,EAAS9C,GAC1B3C,IAAI4D,EAAQ1E,KAAKwE,UAAUT,IAAIwC,GAE/B,OADAvG,KAAKM,OAAO,yBAA0BoE,KAClCA,KACOnD,MACNC,KAAKkD,GACLD,iBAAOnB,GAEN,cAAaG,KACZQ,oBAcTvB,0BAAiB7B,EAAK4C,EAAMpB,EAAUC,GAGpC,kBAH8C,MAC9CtC,KAAKM,yCAAyCmD,eAAc5C,uBAExDb,KAAKsG,iBAAiBzF,EAAK4C,GAAO,CACpCzD,KAAKM,OAAO,yBAA0BmD,eAAc5C,+BACpDC,IAAI4F,EAAM1G,KAAK2G,YAAYtE,GACvBpB,EAAO,CAACjB,KAAKiD,YAAapC,EAAK6F,EAAKrE,EAAUC,EAASmB,KACtC1B,QAAQC,MAAMhC,KAAKgG,WAAYhG,KAAMiB,iBAE1D,OADAjB,KAAKiD,YAAc2D,EACZtF,EAET,OAAO,eAYT+C,wBAAexD,EAAKiC,EAAcR,EAAgBmB,kBAApB,mBAAc,sBAAa,GAIvD3C,IAAIG,EAAO,CAACjB,KAAKwE,UAAW3D,EAAKb,KAAK6F,QAAQ/C,GAAUR,GACpDmB,GACFxC,EAAKkE,KAAK1B,GAEZ,MAAqB1B,QAAQC,MAAMhC,KAAKgG,WAAYhG,KAAMiB,iBAG1D,OAFAjB,KAAKwE,UAAYoC,EACjB5G,KAAKM,iCAAiCgB,GAC/BA,eAQTuE,iBAAQgB,GACN,OAAOtF,MAAM2E,QAAQW,GAAOA,EAAM,CAACA,IAOrCzF,EAAI6B,yBAAY6D,GACdlH,EAA+ByG,IAAIrG,KAAM8G,IAM3C1F,EAAI6B,2BACF,OAAOrD,EAA+BmE,IAAI/D,OAO5CoB,EAAIoD,uBAAUsC,GACZhH,EAA8BuG,IAAIrG,KAAO8G,IAM3C1F,EAAIoD,yBACF,OAAO1E,EAA8BiE,IAAI/D,mBAS3C2G,qBAAYI,GACV,OC5TG,SAAkBC,GACxB,OAAOA,EAAEC,MAAM,IAAIC,QAAO,SAASC,EAAEC,GAAgC,OAA7BD,GAAIA,GAAG,GAAGA,EAAGC,EAAEC,WAAW,IAAYF,IAAG,GAIzEG,CDuTeP,EAAGQ,YCvTJ,8CDHyBxH"}