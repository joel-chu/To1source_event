{"version":3,"file":"nb-event-service-alias.cjs.js","sources":["../src/constants.js","../src/store.js","../src/suspend.js","../src/store-service.js","../alias.js","../src/event-service.js","../src/hash-code.js"],"sourcesContent":["// group all the repetitive message here\n\nexport const TAKEN_BY_OTHER_TYPE_ERR = 'You are trying to register an event already been taken by other type:'\n","// Create two WeakMap store as a private keys\nexport const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n/*\nwe use a different way to do the same watch thing now\nthis.watch('suspend', function(value, prop, oldValue) {\n  this.logger(`${prop} set from ${oldValue} to ${value}`)\n  // it means it set the suspend = true then release it\n  if (oldValue === true && value === false) {\n    // we want this happen after the return happens\n    setTimeout(() => {\n      this.release()\n    }, 1)\n  }\n  return value; // we need to return the value to store it\n})\n*/\n\nexport default class SuspendClass {\n\n  constructor() {\n    // suspend, release and queue\n    this.__suspend_state__ = null\n    this.queueStore = new Set()\n  }\n\n  /**\n   * Add an alias method\n   */\n  $suspend() {\n    this.logger(`---> SUSPEND ALL OPS <---`)\n    this.__suspend__(true)\n  }\n\n  $release() {\n    this.logger(`---> RELEASE SUSPENDED QUEUE <---`)\n    this.__suspend__(false)\n  }\n\n  /**\n   * queuing call up when it's in suspend mode\n   * @param {*} args unknown number of arguments\n   * @return {boolean|number} true when added or false when it's not\n   */\n  $queue(...args) {\n    if (this.__suspend__ === true) {\n      this.logger('($queue) added to $queue', args)\n      // @TODO there shouldn't be any duplicate, but how to make sure?\n      this.queueStore.add(args)\n      return this.queueStore.size\n    }\n    return !!this.__suspend__\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size\n    this.logger('($queues)', `size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   */\n  __suspend__(value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.__suspend_state__\n      this.__suspend_state__ = value\n      this.logger(`($suspend) Change from \"${lastValue}\" --> \"${value}\"`)\n      if (lastValue === true && value === false) {\n        this.__release__()\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value! we got ${typeof value}`)\n    }\n  }\n\n  /**\n   * Release the queue\n   * @return {int} size if any\n   */\n  __release__() {\n    let size = this.queueStore.size\n    this.logger('(release)', `Release was called with ${size} item${size > 1 ? 's' : ''}`)\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.queueStore.clear()\n      this.logger('(release queue)', queue)\n      queue.forEach(args => {\n        this.logger(args)\n        Reflect.apply(this.$trigger, this, args)\n      })\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n    \n    return size\n  }\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport { hashCode2Str } from './hash-code'\nimport SuspendClass from './suspend'\n\nexport default class NbEventServiceBase extends SuspendClass {\n\n  constructor(config = {}) {\n    super()\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger\n    }\n    this.keep = config.keep\n    // for the $done setter\n    this.result = config.keep ? [] : null\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  // for id if the instance is this class\n  get is() {\n    return 'nb-event-service'\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(...evt) {\n    evt.forEach(e => {\n      if (typeof e !== 'string') {\n        this.logger('(validateEvt)', e)\n        throw new Error(`Event name must be string type! we got ${typeof e}`)\n      }\n    })\n    return true\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true\n      }\n    }\n    throw new Error(`callback required to be function type! we got ${typeof callback}`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    const _type = (type+'').toLowerCase()\n    const types = ['on', 'only', 'once', 'onlyOnce']\n    return !!types.filter(t => _type === t).length\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('(run) callback:', callback, 'payload:', payload, 'context:', ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName] // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger(`(takeFromStore) has \"${evt}\"`, content)\n        store.delete(evt)\n        return content\n      }\n      return false\n    }\n    throw new Error(`\"${storeName}\" is not supported!`)\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet\n    if (store.has(evt)) {\n      this.logger(`(addToStore) \"${evt}\" existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger(`(addToStore) create new Set for \"${evt}\"`)\n      // this is new\n      fnSet = new Set()\n    }\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger(`(addToStore) insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(li => {\n      let [hash,] = li\n      return hash === args[0]\n    }).length\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n      // pristine it means you can add\n      return true\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list\n      return type !== t\n    }).length\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let store = this.lazyStore.get(evtName)\n    this.logger('(checkTypeInLazyStore)', store)\n    if (store) {\n      return !!Array\n        .from(store)\n        .filter(li => {\n          let [,,t] = li\n          return t !== type\n        }).length\n    }\n    return false\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger(`(addToNormalStore) try to add \"${type}\" --> \"${evt}\" to normal store`)\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger('(addToNormalStore)', `\"${type}\" --> \"${evt}\" can add to normal store`)\n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store\n      return size\n    }\n    return false\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store\n    this.logger(`(addToLazyStore) size: ${size}`)\n    return size\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg]\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return hashCode2Str(fn.toString())\n  }\n}\n","// this is an alias class that will create several alias method to their counter part\n// that will match up the other EventEmitter library out there for the developer to swap over\n\nimport EventService from './src/event-service'\n\nexport default class AliasEventService extends EventService {\n\n  constructor(options = {}) {\n    super(options)\n  }\n\n  on(...args) {\n    return Reflect.apply(this.$on, this, args)\n  }\n\n  off(...args) {\n    return Reflect.apply(this.$off, this, args)\n  }\n\n  emit(...args) {\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  once(...args) {\n    return Reflect.apply(this.$once, this, args)\n  }\n\n  only(...args) {\n    return Reflect.apply(this.$only, this, args)\n  }\n\n  onlyOnce(...args) {\n    return Reflect.apply(this.$onlyOnce, this, args)\n  }\n\n  get(...args) {\n    return Reflect.apply(this.$get, this, args)\n  }\n\n  replace(...args) {\n    return Reflect.apply(this.$replace, this, args)\n  }\n}\n","// The top level\nimport { TAKEN_BY_OTHER_TYPE_ERR } from './constants'\nimport NbStoreService from './store-service'\n// export\nexport default class EventService extends NbStoreService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on'\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger(`($on) \"${evt}\" is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger(`($on) ${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($on)`, `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n\n    this.logger(`($on) return size ${size}`)\n    return size\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n    const type = 'once'\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (lazyStoreContent === false) {\n      this.logger(`($once) \"${evt}\" is not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, type, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger('($once)', `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'only'\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n    if (!nStore.has(evt)) {\n      this.logger(`($only) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger(`($only) \"${evt}\" found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( li => {\n        const [ payload, ctx, t ] = li\n        if (t && t !== type) {\n          throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n        }\n        this.logger(`($only) call run \"${evt}\"`)\n        this.run(callback, payload, context || ctx)\n      })\n    }\n    return added\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD added in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'onlyOnce'\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== 'onlyOnce') {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($onlyOnce) call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {}\n   */\n  $replace(evt, callback, context = null, type = 'on') {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n      this.logger(`($replace)`, evt, callback)\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0\n    // first check the normal store\n    let nStore = this.normalStore\n    this.logger('($trigger) normalStore', nStore)\n    if (nStore.has(evt)) {\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      this.logger(`($trigger) \"${evt}\" found, add to queue: `, added)\n      if (added === true) {\n        this.logger(`($trigger) \"${evt}\" not executed. Exit now.`)\n        return false // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length\n      let hasOnce = false\n      let hasOnly = false\n      for (let i=0; i < ctn; ++i) {\n        ++found;\n        // this.logger('found', found)\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.logger(`($trigger) call run for ${evt}`)\n        this.run(callback, payload, context || ctx)\n        if (type === 'once' || type === 'onlyOnce') {\n          hasOnce = true;\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter aroun\n   * @NOTE breaking change: v1.9.1 it return an function to accept the params as spread\n   * @param {string} evt event name\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, type = false, context = null) {\n    const ctx = this\n\n    return (...args) => {\n      let _args = [evt, args, context, type]\n      return Reflect.apply(ctx.$trigger, ctx, _args)\n    }\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n\n    return !!stores.filter(store => store.has(evt))\n          .map(store => {\n            this.logger('($off)', evt)\n            store.delete(evt)\n          }).length\n  }\n\n  /**\n   * return all the listener bind to that event name\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    this.validateEvt(evt)\n    let store = this.normalStore\n    if (store.has(evt)) {\n\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l\n          }\n          let [key, callback, ] = l\n          return callback\n        })\n    }\n    return false\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('($done) value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    this.logger('($done) results:', this.result)\n    if (this.keep) {\n      return this.result[this.result.length - 1]\n    }\n    return this.result\n  }\n\n  /**\n   * Take a look inside the stores\n   * @param {number|null} idx of the store, null means all\n   * @return {void}\n   */\n  $debug(idx = null) {\n    let names = ['lazyStore', 'normalStore']\n    let stores = [this.lazyStore, this.normalStore]\n    if (stores[idx]) {\n      this.logger(names[idx], stores[idx])\n    } else {\n      stores.map((store, i) => {\n        this.logger(names[i], store)\n      })\n    }\n  }\n}\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n// wrapper to make sure it string \nexport function hashCode2Str(s) {\n  return hashCode(s) + ''\n}\n"],"names":["const","TAKEN_BY_OTHER_TYPE_ERR","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","SuspendClass","this","__suspend_state__","queueStore","Set","$suspend","logger","__suspend__","$release","$queue","args","add","size","prototypeAccessors","$queues","Array","from","value","Error","lastValue","__release__","queue","clear","forEach","Reflect","apply","$trigger","AliasEventService","options","super","on","$on","off","$off","emit","once","$once","only","$only","onlyOnce","$onlyOnce","get","$get","replace","$replace","config","evt","callback","context","validate","let","lazyStoreContent","takeFromStore","addToNormalStore","content","t","run","payload","ctx","normalStore","added","has","li","type","validateType","method","validateEvt","found","nStore","nSet","ctn","length","hasOnce","i","delete","addToLazyStore","$call","_args","lazyStore","filter","store","map","full","l","$done","keep","result","push","$debug","idx","names","stores","Map","is","e","_type","toLowerCase","toArray","storeName","addToStore","fnSet","isArray","checkTypeInLazyStore","checkContentExist","set","checkTypeInStore","evtName","all","list","key","hashFnToKey","_store","arg","obj","fn","s","split","reduce","a","b","charCodeAt","hashCode","toString"],"mappings":"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"}