{"version":3,"file":"to1source-event.cjs.js","sources":["../src/constants.js","../src/store.js","../src/utils.js","../src/suspend.js","../src/store-service.js","../src/event-service.js"],"sourcesContent":["// group all the repetitive message here\n\nexport const TAKEN_BY_OTHER_TYPE_ERR = 'You are trying to register an event already been taken by other type:'\n","// Create two WeakMap store as a private keys\nexport const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n\n/**\n * wrapper to make sure it string\n * @param {*} input whatever\n * @return {string} output\n */\nexport function hashCode2Str(s) {\n  return hashCode(s) + ''\n}\n\n/**\n * Just check if a pattern is an RegExp object\n * @param {*} pat whatever\n * @return {boolean} false when its not\n */\nexport function isRegExp(pat) {\n  return pat instanceof RegExp\n}\n\n/**\n * check if its string\n * @param {*} arg whatever\n * @return {boolean} false when it's not\n */\nexport function isString(arg) {\n  return typeof arg === 'string'\n}\n\n/**\n * Find from the array by matching the pattern\n * @param {*} pattern a string or RegExp object\n * @return {object} regex object or false when we can not id the input\n */\nexport function getRegex(pattern) {\n  switch (true) {\n    case isRegExp(pattern) === true:\n      return pattern\n    case isString(pattern) === true:\n      return new RegExp(pattern)\n    default:\n      return false\n  }\n}\n","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n/*\nwe use a different way to do the same watch thing now\nthis.watch('suspend', function(value, prop, oldValue) {\n  this.logger(`${prop} set from ${oldValue} to ${value}`)\n  // it means it set the suspend = true then release it\n  if (oldValue === true && value === false) {\n    // we want this happen after the return happens\n    setTimeout(() => {\n      this.release()\n    }, 1)\n  }\n  return value; // we need to return the value to store it\n})\n*/\nimport { getRegex, isRegExp } from './utils'\n\nexport default class SuspendClass {\n\n  constructor() {\n    // suspend, release and queue\n    this.__suspend_state__ = null\n    // to do this proper we don't use a new prop to hold the event name pattern\n    this.__pattern__ = null\n    this.queueStore = new Set()\n  }\n\n  /**\n   * start suspend\n   * @return {void}\n   */\n  $suspend() {\n    this.logger(`---> SUSPEND ALL OPS <---`)\n    this.__suspend__(true)\n  }\n\n  /**\n   * release the queue\n   * @return {void}\n   */\n  $release() {\n    this.logger(`---> RELEASE SUSPENDED QUEUE <---`)\n    this.__suspend__(false)\n  }\n\n  /**\n   * suspend event by pattern\n   * @param {string} pattern the pattern search matches the event name\n   * @return {void}\n   */\n  $suspendEvent(pattern) {\n    const regex = getRegex(pattern)\n    this.logger(regex, regex instanceof RegExp)\n    if (isRegExp(regex)) {\n      this.__pattern__ = regex\n      return this.$suspend()\n    }\n    throw new Error(`We expect a pattern variable to be string or RegExp, but we got \"${typeof regex}\" instead`)\n  }\n\n  /**\n   * queuing call up when it's in suspend mode\n   * @param {string} evt the event name\n   * @param {*} args unknown number of arguments\n   * @return {boolean} true when added or false when it's not\n   */\n  $queue(evt, ...args) {\n    this.logger('($queue) get called')\n    if (this.__suspend_state__ === true) {\n      if (isRegExp(this.__pattern__)) { // it's better then check if its not null\n        // check the pattern and decide if we want to suspend it or not\n        let found = this.__pattern__.test(evt)\n        if (!found) {\n          return false\n        }\n      }\n      this.logger('($queue) added to $queue', args)\n      // @TODO there shouldn't be any duplicate, but how to make sure?\n      this.queueStore.add([evt].concat(args))\n      // return this.queueStore.size\n    }\n    return !!this.__suspend_state__\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size\n    this.logger('($queues)', `size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   */\n  __suspend__(value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.__suspend_state__\n      this.__suspend_state__ = value\n      this.logger(`($suspend) Change from \"${lastValue}\" --> \"${value}\"`)\n      if (lastValue === true && value === false) {\n        this.__release__()\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value! we got ${typeof value}`)\n    }\n  }\n\n  /**\n   * Release the queue\n   * @return {int} size if any\n   */\n  __release__() {\n    let size = this.queueStore.size\n    let pattern = this.__pattern__\n    this.__pattern__ = null\n    this.logger(`(release) was called with ${size}${pattern ? ' for \"' + pattern + '\"': ''} item${size > 1 ? 's' : ''}`)\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.queueStore.clear()\n      this.logger('(release queue)', queue)\n      queue.forEach(args => {\n        this.logger(args)\n        Reflect.apply(this.$trigger, this, args)\n      })\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n\n    return size\n  }\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport { hashCode2Str, isString } from './utils'\nimport SuspendClass from './suspend'\n\nexport default class StoreService extends SuspendClass {\n\n  constructor(config = {}) {\n    super()\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger\n    }\n    this.keep = config.keep\n    // for the $done setter\n    this.result = config.keep ? [] : null\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(...evt) {\n    evt.forEach(e => {\n      if (!isString(e)) {\n        this.logger('(validateEvt)', e)\n        throw new Error(`Event name must be string type! we got ${typeof e}`)\n      }\n    })\n    return true\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true\n      }\n    }\n    throw new Error(`callback required to be function type! we got ${typeof callback}`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    this.validateEvt(type)\n    const types = ['on', 'only', 'once', 'onlyOnce']\n    return !!types.filter(t => type === t).length\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('(run) callback:', callback, 'payload:', payload, 'context:', ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName] // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger(`(takeFromStore) has \"${evt}\"`, content)\n        store.delete(evt)\n        return content\n      }\n      return false\n    }\n    throw new Error(`\"${storeName}\" is not supported!`)\n  }\n\n  /**\n   * This was part of the $get. We take it out\n   * so we could use a regex to remove more than one event\n   * @param {object} store the store to return from\n   * @param {string} evt event name\n   * @return {array|boolean} false when not found\n   */\n  findFromStore(evt, store) {\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l\n          }\n          let [key, callback, ] = l\n          return callback\n        })\n    }\n    return false\n  }\n\n  /**\n   * Similar to the findFromStore, but remove\n   * @param {string} evt event name\n   * @param {object} store the store to remove from\n   * @return {boolean} false when not found\n   */\n  removeFromStore(evt, store) {\n    if (store.has(evt)) {\n      this.logger('($off)', evt)\n      store.delete(evt)\n    return true\n    }\n    return false\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet\n    if (store.has(evt)) {\n      this.logger(`(addToStore) \"${evt}\" existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger(`(addToStore) create new Set for \"${evt}\"`)\n      // this is new\n      fnSet = new Set()\n    }\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger(`(addToStore) insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(li => {\n      let [hash,] = li\n      return hash === args[0]\n    }).length\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n      // pristine it means you can add\n      return true\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list\n      return type !== t\n    }).length\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let store = this.lazyStore.get(evtName)\n    this.logger('(checkTypeInLazyStore)', store)\n    if (store) {\n      return !!Array\n        .from(store)\n        .filter(li => {\n          let [,,t] = li\n          return t !== type\n        }).length\n    }\n    return false\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger(`(addToNormalStore) try to add \"${type}\" --> \"${evt}\" to normal store`)\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger('(addToNormalStore)', `\"${type}\" --> \"${evt}\" can add to normal store`)\n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store\n      return size\n    }\n    return false\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store\n    this.logger(`(addToLazyStore) size: ${size}`)\n    return size\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg]\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return hashCode2Str(fn.toString())\n  }\n}\n","// The top level\nimport { TAKEN_BY_OTHER_TYPE_ERR } from './constants'\nimport StoreService from './store-service'\n// export\nexport default class EventService extends StoreService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  // for id if the instance is this class\n  get $name() {\n    return 'to1source-event'\n  }\n\n  // take this down in the next release\n  get is() {\n    return this.$name\n  }\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on'\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger(`($on) \"${evt}\" is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger(`($on) ${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($on)`, `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n\n    this.logger(`($on) return size ${size}`)\n    return size\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n    const type = 'once'\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (lazyStoreContent === false) {\n      this.logger(`($once) \"${evt}\" is not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, type, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger('($once)', `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'only'\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n    if (!nStore.has(evt)) {\n      this.logger(`($only) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger(`($only) \"${evt}\" found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( li => {\n        const [ payload, ctx, t ] = li\n        if (t && t !== type) {\n          throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n        }\n        this.logger(`($only) call run \"${evt}\"`)\n        this.run(callback, payload, context || ctx)\n      })\n    }\n    return added\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD added in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'onlyOnce'\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== 'onlyOnce') {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($onlyOnce) call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {*}\n   */\n  $replace(evt, callback, context = null, type = 'on') {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n      this.logger(`($replace)`, evt, callback)\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0\n    // first check the normal store\n    let nStore = this.normalStore\n    this.logger('($trigger) normalStore', nStore)\n    if (nStore.has(evt)) {\n      this.logger(`($trigger) \"${evt}\" found`)\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      if (added) {\n        this.logger(`($trigger) Currently suspended \"${evt}\" added to queue, nothing executed. Exit now.`)\n        return false // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length\n      let hasOnce = false\n      let hasOnly = false\n      for (let i=0; i < ctn; ++i) {\n        ++found;\n        // this.logger('found', found)\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.logger(`($trigger) call run for ${evt}`)\n        this.run(callback, payload, context || ctx)\n        if (type === 'once' || type === 'onlyOnce') {\n          hasOnce = true;\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter aroun\n   * @NOTE breaking change: v1.9.1 it return an function to accept the params as spread\n   * @param {string} evt event name\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, type = false, context = null) {\n    const ctx = this\n\n    return (...args) => {\n      let _args = [evt, args, context, type]\n      return Reflect.apply(ctx.$trigger, ctx, _args)\n    }\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    // @TODO we will allow a regex pattern to mass remove event\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n\n    return !!stores\n          .filter(store => store.has(evt))\n          .map(store => this.removeFromStore(evt, store))\n          .length\n  }\n\n  /**\n   * return all the listener bind to that event name\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    // @TODO should we allow the same Regex to search for all?\n    this.validateEvt(evt)\n    let store = this.normalStore\n    return this.findFromStore(evt, store)\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('($done) set value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    this.logger('($done) get result:', this.result)\n    if (this.keep) {\n      return this.result[this.result.length - 1]\n    }\n    return this.result\n  }\n\n  /**\n   * Take a look inside the stores\n   * @param {number|null} idx of the store, null means all\n   * @return {void}\n   */\n  $debug(idx = null) {\n    let names = ['lazyStore', 'normalStore']\n    let stores = [this.lazyStore, this.normalStore]\n    if (stores[idx]) {\n      this.logger(names[idx], stores[idx])\n    } else {\n      stores.map((store, i) => {\n        this.logger(names[i], store)\n      })\n    }\n  }\n}\n"],"names":["const","TAKEN_BY_OTHER_TYPE_ERR","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","isRegExp","pat","RegExp","isString","arg","SuspendClass","this","__suspend_state__","__pattern__","queueStore","Set","$suspend","logger","__suspend__","$release","$suspendEvent","pattern","regex","getRegex","Error","$queue","evt","found","test","args","add","concat","prototypeAccessors","$queues","size","Array","from","value","lastValue","__release__","queue","clear","forEach","Reflect","apply","$trigger","EventService","config","super","$name","is","$on","callback","context","validate","let","lazyStoreContent","takeFromStore","addToNormalStore","content","t","run","payload","ctx","$once","normalStore","$off","$only","added","has","li","$onlyOnce","$replace","type","validateType","method","validateEvt","nStore","nSet","get","ctn","length","hasOnce","i","delete","addToLazyStore","$call","_args","lazyStore","filter","store","map","removeFromStore","$get","full","findFromStore","$done","keep","result","push","$debug","idx","names","stores","Map","e","toArray","storeName","l","addToStore","fnSet","isArray","checkTypeInLazyStore","checkContentExist","set","checkTypeInStore","evtName","all","list","key","hashFnToKey","_store","obj","fn","s","split","reduce","a","b","charCodeAt","hashCode","toString"],"mappings":"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"}