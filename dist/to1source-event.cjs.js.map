{"version":3,"file":"to1source-event.cjs.js","sources":["../src/constants.js","../src/utils.js","../src/store.js","../src/base.js","../src/suspend.js","../src/event-service.js","../src/store-service.js"],"sourcesContent":["// group all the repetitive message here\n\nexport const TAKEN_BY_OTHER_TYPE_ERR = 'You are trying to register an event already been taken by other type:'\n\n// use constants for type\nexport const ON_TYPE = 'on'\nexport const ONLY_TYPE = 'only'\nexport const ONCE_TYPE = 'once'\nexport const ONLY_ONCE_TYPE = 'onlyOnce'\nexport const MAX_CALL_TYPE = 'maxAllowCall'\nexport const NEG_RETURN = -1\n\nexport const AVAILABLE_TYPES = [\n  ON_TYPE,\n  ONLY_TYPE,\n  ONCE_TYPE,\n  ONLY_ONCE_TYPE\n]\n// the type which the callMax can execute on\nexport const ON_MAX_TYPES = [\n  ON_TYPE,\n  ONLY_TYPE\n]\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n\n/**\n * wrapper to make sure it string\n * @param {*} input whatever\n * @return {string} output\n */\nexport function hashCode2Str(s) {\n  return hashCode(s) + ''\n}\n\n/**\n * Just check if a pattern is an RegExp object\n * @param {*} pat whatever\n * @return {boolean} false when its not\n */\nexport function isRegExp(pat) {\n  return pat instanceof RegExp\n}\n\n/**\n * check if its string\n * @param {*} arg whatever\n * @return {boolean} false when it's not\n */\nexport function isString(arg) {\n  return typeof arg === 'string'\n}\n\n/**\n * check if it's an integer\n * @param {*} num input number\n * @return {boolean}\n */\nexport function isInt(num) {\n  if (isString(num)) {\n    throw new Error(`Wrong type, we want number!`)\n  }\n  return !isNaN(parseInt(num))\n}\n\n/**\n * Find from the array by matching the pattern\n * @param {*} pattern a string or RegExp object\n * @return {object} regex object or false when we can not id the input\n */\nexport function getRegex(pattern) {\n  switch (true) {\n    case isRegExp(pattern) === true:\n      return pattern\n    case isString(pattern) === true:\n      return new RegExp(pattern)\n    default:\n      return false\n  }\n}\n\n\n/**\n * in array\n * @param {array} arr to search\n * @param {*} prop to search\n */\n export const inArray = (arr, prop) => !!arr.filter(v => prop === v).length\n","// Create two WeakMap store as a private keys\nexport const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// setup a base class to put all the don't know where to put methods \nimport { hashCode2Str, isString } from './utils'\nimport { AVAILABLE_TYPES } from './constants'\n\nexport default class BaseClass {\n\n  constructor() {}\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  // for id if the instance is this class\n  get $name() {\n    return 'to1source-event'\n  }\n\n  // take this down in the next release\n  get is() {\n    return this.$name\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(...evt) {\n    evt.forEach(e => {\n      if (!isString(e)) {\n        this.logger('(validateEvt)', e)\n\n        throw new Error(`Event name must be string type! we got ${typeof e}`)\n      }\n    })\n\n    return true\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n\n        return true\n      }\n    }\n    throw new Error(`callback required to be function type! we got ${typeof callback}`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    this.validateEvt(type)\n    \n    return !!AVAILABLE_TYPES.filter(t => type === t).length\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('(run) callback:', callback, 'payload:', payload, 'context:', ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n\n    return this.$done // return it here first \n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n\n    return hashCode2Str(fn.toString())\n  }\n} ","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n/*\nwe use a different way to do the same watch thing now\nthis.watch('suspend', function(value, prop, oldValue) {\n  this.logger(`${prop} set from ${oldValue} to ${value}`)\n  // it means it set the suspend = true then release it\n  if (oldValue === true && value === false) {\n    // we want this happen after the return happens\n    setTimeout(() => {\n      this.release()\n    }, 1)\n  }\n  return value; // we need to return the value to store it\n})\n*/\nimport { getRegex, isRegExp } from './utils'\n\nimport BaseClass from './base'\n\nexport default class SuspendClass extends BaseClass {\n\n  constructor() {\n    super()\n    // suspend, release and queue\n    this.__suspend_state__ = null\n    // to do this proper we don't use a new prop to hold the event name pattern\n    // @1.2.2 this become an array so we can hold different events\n    this.__pattern__ = []\n    // key value pair store to store the queued calls\n    this.queueStore = new Set()\n  }\n\n  /**\n   * start suspend\n   * @return {void}\n   */\n  $suspend() {\n    this.logger(`---> SUSPEND ALL OPS <---`)\n    this.__suspend__(true)\n  }\n\n  /**\n   * release the queue\n   * @return {void}\n   */\n  $release() {\n    this.logger(`---> RELEASE ALL SUSPENDED QUEUE <---`)\n    this.__suspend__(false)\n  }\n\n  /**\n   * suspend event by pattern\n   * @param {string} pattern the pattern search matches the event name\n   * @return {void}\n   */\n  $suspendEvent(pattern) {\n    const regex = getRegex(pattern)\n    if (isRegExp(regex)) {\n      // check if it's already added \n      if (this.isPatternRegisterd(regex) === false) {\n        this.__pattern__.push(regex)\n        return this.$suspend()\n      }\n      return false\n    }\n    throw new Error(`We expect a pattern variable to be string or RegExp, but we got \"${typeof regex}\" instead`)\n  }\n\n  /**\n   * This is pair with $suspnedEvent to release part of the event queue by the pattern (eventName)\n   * @param {*} pattern a eventName of partial eventName to create a RegExp\n   * @return {*} should be the number of queue got released\n   */\n  $releaseEvent(pattern) {\n    const regex = getRegex(pattern)\n    if (isRegExp(regex) && this.isPatternRegisterd(pattern)) {\n\n      const self = this\n      // first get the list of events in the queue store that match this pattern\n      const ctn = this.$queues\n        // first index is the eventName\n        .filter(content => regex.test(content[0]))\n        .map(content => {\n          this.logger(`[release] execute ${content[0]} matches ${regex}`, content)\n          // we just remove it\n          self.queueStore.delete(content)\n          // execute it\n          Reflect.apply(self.$trigger, self, content)\n        })\n        .length // so the result will be the number of queue that get exeucted\n      // we need to remove this event from the pattern queue array \n      this.__pattern__ = this.__pattern__.filter(p => p !== regex)\n\n      return ctn\n    }\n    throw new Error(`We expect a pattern variable to be string or RegExp, but we got \"${typeof regex}\" instead`)\n  }\n\n  /**\n   * queuing call up when it's in suspend mode,\n   * it's currently suspending then add to store then the $trigger will do nothing\n   * @param {string} evt the event name\n   * @param {*} args unknown number of arguments\n   * @return {boolean} true when added or false when it's not\n   */\n  $queue(evt, ...args) {\n    this.logger('($queue) get called')\n    \n    const hasPattern = this.__pattern__.length\n    // 1. whole sale suspend all\n    switch (true) {\n      case this.__suspend_state__ === true && !hasPattern:\n        \n        return this.addToQueueStore(evt, args)\n      case hasPattern: \n        // check the pattern and decide if we want to suspend it or not\n        let found = !!this.__pattern__.filter(p => p.test(evt)).length\n        if (!found) {\n          this.logger(`($queue) ${evt} NOT added to $queueStore`, args)\n          // just exit and not add to the queue\n          return false\n        }\n        \n        return this.addToQueueStore(evt, args)\n      default:\n        return false\n    } \n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size\n    this.logger('($queues)', `size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * Wrapper method with a logger \n   * @param {*} evt \n   * @param {*} args \n   * @return {boolean}\n   */\n  addToQueueStore(evt, args) {\n    this.logger(`($queue) ${evt} added to $queueStore`, args)\n    this.queueStore.add([evt].concat(args))\n\n    return true\n  }\n\n  /**\n   * check if certain pattern already registered in the queue\n   * @param {*} pattern\n   * @return {boolean} \n   */\n  isPatternRegisterd(pattern) {\n    return !!this.__pattern__.filter(p => p === pattern).length\n  }\n\n  /**\n   * to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   */\n  __suspend__(value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.__suspend_state__\n      this.__suspend_state__ = value\n      this.logger(`($suspend) Change from \"${lastValue}\" --> \"${value}\"`)\n      if (lastValue === true && value === false) {\n        this.__release__()\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value! we got ${typeof value}`)\n    }\n  }\n\n  /**\n   * Release the queue, this is a wholesale release ALL\n   * @return {int} size if any\n   */\n  __release__() {\n    let size = this.queueStore.size\n    let pattern = this.__pattern__\n    this.__pattern__ = []\n    \n    this.logger(`(release) was called with ${size}${pattern.length ? ' for \"' + pattern.join(',') + '\"': ''} item${size > 1 ? 's' : ''}`)\n    \n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.logger('(release queue)', queue)\n\n      queue.forEach(args => {\n        this.logger(`[release] execute ${args[0]}`, args)\n\n        Reflect.apply(this.$trigger, this, args)\n      })\n\n      this.queueStore.clear()\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n\n    return size\n  }\n}\n","// The top level\nimport {\n  ON_TYPE,\n  ONLY_TYPE,\n  ONCE_TYPE,\n  ONLY_ONCE_TYPE,\n  MAX_CALL_TYPE,\n  ON_MAX_TYPES,\n  TAKEN_BY_OTHER_TYPE_ERR,\n  NEG_RETURN\n} from './constants'\nimport { isInt, inArray } from './utils'\nimport StoreService from './store-service'\n// export\nexport default class EventService extends StoreService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on'\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger(`($on) \"${evt}\" is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger(`($on) ${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($on)`, `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n\n    this.logger(`($on) return size ${size}`)\n    return size\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    // let nStore = this.normalStore\n    if (lazyStoreContent === false) {\n      this.logger(`($once) \"${evt}\" is not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, ONCE_TYPE, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== ONCE_TYPE) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger('($once)', `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n\n    if (!nStore.has(evt)) {\n      this.logger(`($only) \"${evt}\" add to normalStore`)\n\n      added = this.addToNormalStore(evt, ONLY_TYPE, callback, context)\n    }\n\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger(`($only) \"${evt}\" found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( li => {\n        const [ payload, ctx, t ] = li\n        if (t && t !== ONLY_TYPE) {\n          throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n        }\n        this.logger(`($only) call run \"${evt}\"`)\n        this.run(callback, payload, context || ctx)\n      })\n    }\n\n    return added\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD added in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce) \"${evt}\" add to normalStore`)\n\n      added = this.addToNormalStore(evt, ONLY_ONCE_TYPE, callback, context)\n    }\n\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== ONLY_ONCE_TYPE) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($onlyOnce) call run \"${evt}\"`)\n\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added\n  }\n\n  /**\n   * change the way how it suppose to work, instead of create another new store\n   * We perform this check on the trigger end, so we set the number max\n   * whenever we call the callback, we increment a value in the store\n   * once it reaches that number we remove that event from the store,\n   * also this will not get add to the lazy store,\n   * which means the event must register before we can fire it\n   * therefore we don't have to deal with the backward check\n   * @param {string} evtName the event to get pre-registered\n   * @param {number} max pass the max amount of callback can add to this event\n   * @param {*} [ctx=null] the context the callback execute in\n   * @return {function} the event handler\n   */\n  $max(evtName, max, ctx = null) {\n    this.validateEvt(evtName)\n    if (isInt(max) && max > 0) {\n      // find this in the normalStore\n      const fnSet = this.$get(evtName, true)\n      if (fnSet !== false) {\n        const evts = this.searchMapEvt(evtName)\n        if (evts.length) {\n          // should only have one anyway\n          const [,,,type] = evts[0]\n          // now init the max store\n          const value = this.checkMaxStore(evtName, max)\n          const _self = this\n          /**\n           * construct the callback\n           * @param {array<*>} args\n           * @return {number} \n           */\n          return function executeMaxCall(...args) {\n            const ctn = _self.getMaxStore(evtName)\n            let value = NEG_RETURN\n            if (ctn > 0) {\n              const fn = _self.$call(evtName, type, ctx)\n              Reflect.apply(fn, _self, args)\n\n              value = _self.checkMaxStore(evtName)\n              if (value === NEG_RETURN) {\n                _self.$off(evtName)\n                return NEG_RETURN\n              }\n            }\n            return value\n          }\n        }\n      }\n      // change in 1.1.1 because we might just call it without knowing if it's register or not\n      this.logger(`The ${evtName} is not registered, can not execute non-existing event at the moment`)\n      return NEG_RETURN\n    }\n    throw new Error(`Expect max to be an integer and greater than zero! But we got [${typeof max}]${max} instead`)\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {*}\n   */\n  $replace(evt, callback, context = null, type = ON_TYPE) {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n\n      this.logger(`($replace)`, evt, callback)\n\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0\n    // first check the normal store\n    let nStore = this.normalStore\n    this.logger('($trigger) normalStore', nStore)\n    if (nStore.has(evt)) {\n      this.logger(`($trigger) \"${evt}\" found`)\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      if (added) {\n        this.logger(`($trigger) Currently suspended \"${evt}\" added to queue, nothing executed. Exit now.`)\n        return false // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length\n      let hasOnce = false\n      // let hasOnly = false\n      for (let i=0; i < ctn; ++i) {\n        ++found\n        // this.logger('found', found)\n        let [ _, callback, ctx, _type ] = nSet[i]\n        this.logger(`($trigger) call run for ${type}:${evt}`)\n\n        this.run(callback, payload, context || ctx)\n\n        if (_type === 'once' || _type === 'onlyOnce') {\n          hasOnce = true\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter aroun\n   * @NOTE breaking change: v1.9.1 it return an function to accept the params as spread\n   * @param {string} evt event name\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, type = false, context = null) {\n    const ctx = this\n\n    return function executeCall(...args) {\n      let _args = [evt, args, context, type]\n\n      return Reflect.apply(ctx.$trigger, ctx, _args)\n    }\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    // @TODO we will allow a regex pattern to mass remove event\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n\n    return !!stores\n          .filter(store => store.has(evt))\n          .map(store => this.removeFromStore(evt, store))\n          .length\n  }\n\n  /**\n   * return all the listener bind to that event name\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    // @TODO should we allow the same Regex to search for all?\n    this.validateEvt(evt)\n    let store = this.normalStore\n    return this.findFromStore(evt, store, full)\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('($done) set value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    this.logger('($done) get result:', this.result)\n    if (this.keep) {\n      return this.result[this.result.length - 1]\n    }\n    return this.result\n  }\n\n  /**\n   * Take a look inside the stores\n   * @param {number|null} idx of the store, null means all\n   * @return {void}\n   */\n  $debug(idx = null) {\n    let names = ['lazyStore', 'normalStore']\n    let stores = [this.lazyStore, this.normalStore]\n    if (stores[idx]) {\n      this.logger(names[idx], stores[idx])\n    } else {\n      stores.map((store, i) => {\n        this.logger(names[i], store)\n      })\n    }\n  }\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport {\n  NEG_RETURN,\n  ON_MAX_TYPES\n} from './constants'\nimport { isInt, inArray } from './utils'\n\nimport SuspendClass from './suspend'\n\nexport default class StoreService extends SuspendClass {\n\n  constructor(config = {}) {\n    super()\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger\n    }\n    this.keep = config.keep\n    // for the $done setter\n    this.result = config.keep ? [] : null\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n    // this is the new throw away map\n    this.maxCountStore = new Map()\n  }\n\n  /**\n   * We need this to pre-check the store, otherwise\n   * the execution will be unable to determine the number of calls\n   * @param {string} evtName event name\n   * @return {number} the count of this store\n   */\n  getMaxStore(evtName) {\n    return this.maxCountStore.get(evtName) || NEG_RETURN\n  }\n\n  /**\n   * This is one stop shop to check and munipulate the maxStore\n   * @param {*} evtName\n   * @param {*} [max=null]\n   * @return {number} when return -1 means removed\n   */\n  checkMaxStore(evtName, max = null) {\n    this.logger(`===========================================`)\n    this.logger('checkMaxStore start', evtName, max)\n    // init the store\n    if (max !== null && isInt(max)) {\n      // because this is the setup phrase we just return the max value\n      this.maxCountStore.set(evtName, max)\n      this.logger(`Setup max store for ${evtName} with ${max}`)\n      return max\n    }\n    if (max === null) {\n      // first check if this exist in the maxStore\n      let value = this.getMaxStore(evtName)\n\n      this.logger('getMaxStore value', value)\n\n      if (value !== NEG_RETURN) {\n        if (value > 0) {\n          --value\n        }\n        if (value > 0) {\n          this.maxCountStore.set(evtName, value) // just update the value\n        } else {\n          this.maxCountStore.delete(evtName) // just remove it\n          this.logger(`remove ${evtName} from maxStore`)\n          return NEG_RETURN\n        }\n      }\n      return value\n    }\n    throw new Error(`Expect max to be an integer, but we got ${typeof max} ${max}`)\n  }\n\n  /**\n   * Wrap several get filter ops together to return the callback we are looking for\n   * @param {string} evtName to search for\n   * @return {array} empty array when not found\n   */\n  searchMapEvt(evtName) {\n    const evts = this.$get(evtName, true) // return in full\n    const search = evts.filter(result => {\n      const [ ,,,type ] = result\n\n      return inArray(ON_MAX_TYPES, type)\n    })\n\n    return search.length ? search : []\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName] // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger(`(takeFromStore) has \"${evt}\"`, content)\n        store.delete(evt)\n\n        return content\n      }\n\n      return false\n    }\n    throw new Error(`\"${storeName}\" is not supported!`)\n  }\n\n  /**\n   * This was part of the $get. We take it out\n   * so we could use a regex to remove more than one event\n   * @param {object} store the store to return from\n   * @param {string} evt event name\n   * @param {boolean} full return just the callback or everything\n   * @return {array|boolean} false when not found\n   */\n  findFromStore(evt, store, full = false) {\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l\n          }\n          let [, callback,] = l\n\n          return callback\n        })\n    }\n    return false\n  }\n\n  /**\n   * Similar to the findFromStore, but remove\n   * @param {string} evt event name\n   * @param {object} store the store to remove from\n   * @return {boolean} false when not found\n   */\n  removeFromStore(evt, store) {\n    if (store.has(evt)) {\n      this.logger('($off)', evt)\n\n      store.delete(evt)\n\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Take out from addToStore for reuse\n   * @param {object} store the store to use\n   * @param {string} evt event name\n   * @return {object} the set within the store\n   */\n  getStoreSet(store, evt) {\n    let fnSet\n    if (store.has(evt)) {\n      this.logger(`(addToStore) \"${evt}\" existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger(`(addToStore) create new Set for \"${evt}\"`)\n      // this is new\n      fnSet = new Set()\n    }\n    return fnSet\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    const fnSet = this.getStoreSet(store, evt)\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger(`(addToStore) insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(li => {\n      let [hash,] = li\n      return hash === args[0]\n    }).length\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n      // pristine it means you can add\n      return true\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list\n      return type !== t\n    }).length\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let store = this.lazyStore.get(evtName)\n\n    this.logger('(checkTypeInLazyStore)', store)\n\n    if (store) {\n\n      return !!Array\n        .from(store)\n        .filter(li => {\n          let [,,t] = li\n          return t !== type\n        }).length\n    }\n\n    return false\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger(`(addToNormalStore) try to add \"${type}\" --> \"${evt}\" to normal store`)\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n\n      this.logger('(addToNormalStore)', `\"${type}\" --> \"${evt}\" can add to normal store`)\n\n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store\n\n      return size\n    }\n\n    return false\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store\n    this.logger(`(addToLazyStore) size: ${size}`)\n\n    return size\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg]\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n\n}\n"],"names":["const","TAKEN_BY_OTHER_TYPE_ERR","AVAILABLE_TYPES","ON_MAX_TYPES","isRegExp","pat","RegExp","isString","arg","isInt","num","Error","isNaN","parseInt","getRegex","pattern","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","BaseClass","logger","prototypeAccessors","$name","is","this","validateEvt","evt","forEach","e","validate","callback","validateType","type","filter","t","length","run","payload","ctx","$done","Reflect","apply","toArray","hashFnToKey","fn","s","split","reduce","a","b","charCodeAt","hashCode","toString","EventService","config","super","$on","context","let","lazyStoreContent","takeFromStore","addToNormalStore","size","content","$once","Array","from","$off","$only","added","normalStore","has","li","$onlyOnce","$max","evtName","max","$get","evts","searchMapEvt","_self","checkMaxStore","ctn","getMaxStore","value","$call","args","$replace","method","$trigger","found","nStore","$queue","nSet","get","hasOnce","i","_type","delete","addToLazyStore","_args","lazyStore","store","map","removeFromStore","full","findFromStore","keep","result","push","$debug","idx","names","stores","Map","maxCountStore","set","search","prop","v","storeName","l","getStoreSet","fnSet","Set","addToStore","isArray","checkTypeInLazyStore","add","checkContentExist","checkTypeInStore","all","list","key","_store","obj","__suspend_state__","__pattern__","queueStore","$suspend","__suspend__","$release","$suspendEvent","regex","isPatternRegisterd","$releaseEvent","self","$queues","test","p","hasPattern","addToQueueStore","concat","lastValue","__release__","join","queue","clear"],"mappings":"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"}