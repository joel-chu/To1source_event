{"version":3,"file":"alias.js","sources":["../src/constants.js","../src/utils.js","../src/store.js","../src/base.js","../src/suspend.js","../alias.js","../src/event-service.js","../src/store-service.js"],"sourcesContent":["// group all the repetitive message here\n\nexport const TAKEN_BY_OTHER_TYPE_ERR = 'You are trying to register an event already been taken by other type:'\n\n// use constants for type \nexport const ON_TYPE = 'on'\nexport const ONLY_TYPE = 'only'\nexport const ONCE_TYPE = 'once'\nexport const ONLY_ONCE_TYPE = 'onlyOnce'\nexport const MAX_CALL_TYPE = 'maxAllowCall'\n\nexport const AVAILABLE_TYPES = [\n  ON_TYPE,\n  ONLY_TYPE,\n  ONCE_TYPE,\n  ONLY_ONCE_TYPE\n]\n// the type which the callMax can execute on\nexport const ON_MAX_TYPES = [\n  ON_TYPE,\n  ONLY_TYPE \n]\n\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n\n/**\n * wrapper to make sure it string\n * @param {*} input whatever\n * @return {string} output\n */\nexport function hashCode2Str(s) {\n  return hashCode(s) + ''\n}\n\n/**\n * Just check if a pattern is an RegExp object\n * @param {*} pat whatever\n * @return {boolean} false when its not\n */\nexport function isRegExp(pat) {\n  return pat instanceof RegExp\n}\n\n/**\n * check if its string\n * @param {*} arg whatever\n * @return {boolean} false when it's not\n */\nexport function isString(arg) {\n  return typeof arg === 'string'\n}\n\n/**\n * check if it's an integer \n * @param {*} num input number \n * @return {boolean}  \n */\nexport function isInt(num) {\n  if (isString(num)) {\n    throw new Error(`Wrong type, we want number!`)\n  }\n  return !isNaN(parseInt(num))\n}\n\n/**\n * Find from the array by matching the pattern\n * @param {*} pattern a string or RegExp object\n * @return {object} regex object or false when we can not id the input\n */\nexport function getRegex(pattern) {\n  switch (true) {\n    case isRegExp(pattern) === true:\n      return pattern\n    case isString(pattern) === true:\n      return new RegExp(pattern)\n    default:\n      return false\n  }\n}\n","// Create two WeakMap store as a private keys\nexport const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// setup a base class to put all the don't know where to put methods \nimport { hashCode2Str, isString } from './utils'\nimport { AVAILABLE_TYPES } from './constants'\n\nexport default class BaseClass {\n\n  constructor() {}\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  // for id if the instance is this class\n  get $name() {\n    return 'to1source-event'\n  }\n\n  // take this down in the next release\n  get is() {\n    return this.$name\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(...evt) {\n    evt.forEach(e => {\n      if (!isString(e)) {\n        this.logger('(validateEvt)', e)\n\n        throw new Error(`Event name must be string type! we got ${typeof e}`)\n      }\n    })\n\n    return true\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n\n        return true\n      }\n    }\n    throw new Error(`callback required to be function type! we got ${typeof callback}`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    this.validateEvt(type)\n    \n    return !!AVAILABLE_TYPES.filter(t => type === t).length\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('(run) callback:', callback, 'payload:', payload, 'context:', ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n\n    return this.$done // return it here first \n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n\n    return hashCode2Str(fn.toString())\n  }\n} ","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n/*\nwe use a different way to do the same watch thing now\nthis.watch('suspend', function(value, prop, oldValue) {\n  this.logger(`${prop} set from ${oldValue} to ${value}`)\n  // it means it set the suspend = true then release it\n  if (oldValue === true && value === false) {\n    // we want this happen after the return happens\n    setTimeout(() => {\n      this.release()\n    }, 1)\n  }\n  return value; // we need to return the value to store it\n})\n*/\nimport { getRegex, isRegExp } from './utils'\n\nimport BaseClass from './base'\n\nexport default class SuspendClass extends BaseClass {\n\n  constructor() {\n    super()\n\n    // suspend, release and queue\n    this.__suspend_state__ = null\n    // to do this proper we don't use a new prop to hold the event name pattern\n    this.__pattern__ = null\n\n\n    this.queueStore = new Set()\n  }\n\n  /**\n   * start suspend\n   * @return {void}\n   */\n  $suspend() {\n    this.logger(`---> SUSPEND ALL OPS <---`)\n    this.__suspend__(true)\n  }\n\n  /**\n   * release the queue\n   * @return {void}\n   */\n  $release() {\n    this.logger(`---> RELEASE SUSPENDED QUEUE <---`)\n    this.__suspend__(false)\n  }\n\n  /**\n   * suspend event by pattern\n   * @param {string} pattern the pattern search matches the event name\n   * @return {void}\n   */\n  $suspendEvent(pattern) {\n    const regex = getRegex(pattern)\n    if (isRegExp(regex)) {\n      this.__pattern__ = regex\n      return this.$suspend()\n    }\n    throw new Error(`We expect a pattern variable to be string or RegExp, but we got \"${typeof regex}\" instead`)\n  }\n\n  /**\n   * queuing call up when it's in suspend mode\n   * @param {string} evt the event name\n   * @param {*} args unknown number of arguments\n   * @return {boolean} true when added or false when it's not\n   */\n  $queue(evt, ...args) {\n    this.logger('($queue) get called')\n    if (this.__suspend_state__ === true) {\n      if (isRegExp(this.__pattern__)) { // it's better then check if its not null\n        // check the pattern and decide if we want to suspend it or not\n        let found = this.__pattern__.test(evt)\n        if (!found) {\n          return false\n        }\n      }\n      this.logger('($queue) added to $queue', args)\n      // @TODO there shouldn't be any duplicate, but how to make sure?\n      this.queueStore.add([evt].concat(args))\n      // return this.queueStore.size\n    }\n    return !!this.__suspend_state__\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size\n    this.logger('($queues)', `size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   */\n  __suspend__(value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.__suspend_state__\n      this.__suspend_state__ = value\n      this.logger(`($suspend) Change from \"${lastValue}\" --> \"${value}\"`)\n      if (lastValue === true && value === false) {\n        this.__release__()\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value! we got ${typeof value}`)\n    }\n  }\n\n  /**\n   * Release the queue\n   * @return {int} size if any\n   */\n  __release__() {\n    let size = this.queueStore.size\n    let pattern = this.__pattern__\n    this.__pattern__ = null\n    this.logger(`(release) was called with ${size}${pattern ? ' for \"' + pattern + '\"': ''} item${size > 1 ? 's' : ''}`)\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.queueStore.clear()\n      this.logger('(release queue)', queue)\n      queue.forEach(args => {\n        this.logger(args)\n        Reflect.apply(this.$trigger, this, args)\n      })\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n\n    return size\n  }\n}\n","// this is an alias class that will create several alias method to their counter part\n// that will match up the other EventEmitter library out there for the developer to swap over\n\nimport EventService from './src/event-service'\n\nexport default class AliasEventService extends EventService {\n\n  constructor(options = {}) {\n    super(options)\n  }\n\n  on(...args) {\n    return Reflect.apply(this.$on, this, args)\n  }\n\n  off(...args) {\n    return Reflect.apply(this.$off, this, args)\n  }\n\n  emit(...args) {\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  once(...args) {\n    return Reflect.apply(this.$once, this, args)\n  }\n\n  only(...args) {\n    return Reflect.apply(this.$only, this, args)\n  }\n\n  onlyOnce(...args) {\n    return Reflect.apply(this.$onlyOnce, this, args)\n  }\n\n  get(...args) {\n    return Reflect.apply(this.$get, this, args)\n  }\n\n  replace(...args) {\n    return Reflect.apply(this.$replace, this, args)\n  }\n}\n","// The top level\nimport {\n  ON_TYPE,\n  ONLY_TYPE,\n  ONCE_TYPE,\n  ONLY_ONCE_TYPE,\n  MAX_CALL_TYPE,\n  ON_MAX_TYPES,\n  TAKEN_BY_OTHER_TYPE_ERR\n} from './constants'\nimport { isInt } from './utils'\nimport StoreService from './store-service'\n// export\nexport default class EventService extends StoreService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on'\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger(`($on) \"${evt}\" is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger(`($on) ${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($on)`, `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n\n    this.logger(`($on) return size ${size}`)\n    return size\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    // let nStore = this.normalStore\n    if (lazyStoreContent === false) {\n      this.logger(`($once) \"${evt}\" is not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, ONCE_TYPE, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== ONCE_TYPE) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger('($once)', `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n\n    if (!nStore.has(evt)) {\n      this.logger(`($only) \"${evt}\" add to normalStore`)\n\n      added = this.addToNormalStore(evt, ONLY_TYPE, callback, context)\n    }\n\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger(`($only) \"${evt}\" found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( li => {\n        const [ payload, ctx, t ] = li\n        if (t && t !== ONLY_TYPE) {\n          throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n        }\n        this.logger(`($only) call run \"${evt}\"`)\n        this.run(callback, payload, context || ctx)\n      })\n    }\n\n    return added\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD added in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce) \"${evt}\" add to normalStore`)\n\n      added = this.addToNormalStore(evt, ONLY_ONCE_TYPE, callback, context)\n    }\n\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== ONLY_ONCE_TYPE) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($onlyOnce) call run \"${evt}\"`)\n\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added\n  }\n\n  /**\n   * change the way how it suppose to work, instead of create another new store\n   * We perform this check on the trigger end, so we set the number max\n   * whenever we call the callback, we increment a value in the store\n   * once it reaches that number we remove that event from the store,\n   * also this will not get add to the lazy store,\n   * which means the event must register before we can fire it\n   * therefore we don't have to deal with the backward check\n   * @param {string} evtName the event to get pre-registered\n   * @param {number} max pass the max amount of callback can add to this event\n   * @param {array<*>} args the argument pass to the callback\n   * @return {function} the event handler\n   */\n  $max(evtName, max) {\n    $this.validateEvt(evtName)\n    if (isInt(max) && max > 0) {\n      // find this in the normalStore\n      const fnSet = $get(evtName, true)\n      if (fnSet !== false) {\n        \n\n      }\n      this.logger(`The ${evtName} is not registered`)\n      return false\n    }\n    throw new Error(`Expect max to be an integer and greater than zero! But we got [${typeof max}]${max} instead`)\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {*}\n   */\n  $replace(evt, callback, context = null, type = ON_TYPE) {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n\n      this.logger(`($replace)`, evt, callback)\n\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * Use this instead of $call or $trigger to exeucte the callback\n   * @param {*} evtName\n   * @param {*} context\n   */\n  $callmax(evtName, context = null) {\n    const ctx = this\n    return function execute(...args) {\n      return ctx.$trigger(evtName, args, context, MAX_CALL_TYPE)\n    }\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0\n    // first check the normal store\n    let nStore = this.normalStore\n    this.logger('($trigger) normalStore', nStore)\n    if (nStore.has(evt)) {\n      this.logger(`($trigger) \"${evt}\" found`)\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      if (added) {\n        this.logger(`($trigger) Currently suspended \"${evt}\" added to queue, nothing executed. Exit now.`)\n        return false // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length\n      let hasOnce = false\n      // let hasOnly = false\n      for (let i=0; i < ctn; ++i) {\n        ++found\n        // this.logger('found', found)\n        let [ _, callback, ctx, _type ] = nSet[i]\n        this.logger(`($trigger) call run for ${type}:${evt}`)\n        // this is when its already registered\n        if (type === ON_MAX_TYPE) {\n\n        }\n\n\n        this.run(callback, payload, context || ctx)\n\n        if (_type === 'once' || _type === 'onlyOnce') {\n          hasOnce = true\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter aroun\n   * @NOTE breaking change: v1.9.1 it return an function to accept the params as spread\n   * @param {string} evt event name\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, type = false, context = null) {\n    const ctx = this\n\n    return (...args) => {\n      let _args = [evt, args, context, type]\n\n      return Reflect.apply(ctx.$trigger, ctx, _args)\n    }\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    // @TODO we will allow a regex pattern to mass remove event\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n\n    return !!stores\n          .filter(store => store.has(evt))\n          .map(store => this.removeFromStore(evt, store))\n          .length\n  }\n\n  /**\n   * return all the listener bind to that event name\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    // @TODO should we allow the same Regex to search for all?\n    this.validateEvt(evt)\n    let store = this.normalStore\n    return this.findFromStore(evt, store, full)\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('($done) set value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    this.logger('($done) get result:', this.result)\n    if (this.keep) {\n      return this.result[this.result.length - 1]\n    }\n    return this.result\n  }\n\n  /**\n   * Take a look inside the stores\n   * @param {number|null} idx of the store, null means all\n   * @return {void}\n   */\n  $debug(idx = null) {\n    let names = ['lazyStore', 'normalStore']\n    let stores = [this.lazyStore, this.normalStore]\n    if (stores[idx]) {\n      this.logger(names[idx], stores[idx])\n    } else {\n      stores.map((store, i) => {\n        this.logger(names[i], store)\n      })\n    }\n  }\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport { isInt } from './utils'\n\nimport SuspendClass from './suspend'\n\nexport default class StoreService extends SuspendClass {\n\n  constructor(config = {}) {\n    super()\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger\n    }\n    this.keep = config.keep\n    // for the $done setter\n    this.result = config.keep ? [] : null\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n    // this is the new throw away map\n    this.maxCountStore = new Map()\n  }\n\n  /**\n   * This is one stop shop to check and munipulate the maxStore \n   * @param {*} evtName \n   * @param {*} [max=null]  \n   * @return {number} when return -1 means removed \n   */\n  checkMaxStore(evtName, max = null) {\n    const tmp = this.maxCountStore \n    // first check if this exist in the maxStore \n    if (tmp.has(evtName)) {\n      let value = tmp.get(evtName)\n      if (value > 0) {\n        --value \n      }\n      if (value > 0) {\n        tmp.set(evtName, value) // just update the value\n      } else {\n        tmp.delete(evtName) // just remove it\n        \n        return -1\n      }\n      \n      return value\n    }\n    if (isInt(max)) {\n      // because this is the setup phrase we just return the max value \n      tmp.set(evtName, max)\n      \n      return max\n    }\n    throw new Error(`Expect max to be an integer, but we got ${typeof max}`)\n  }\n\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName] // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger(`(takeFromStore) has \"${evt}\"`, content)\n        store.delete(evt)\n      \n        return content\n      }\n      \n      return false\n    }\n    throw new Error(`\"${storeName}\" is not supported!`)\n  }\n\n  /**\n   * This was part of the $get. We take it out\n   * so we could use a regex to remove more than one event\n   * @param {object} store the store to return from\n   * @param {string} evt event name\n   * @param {boolean} full return just the callback or everything\n   * @return {array|boolean} false when not found\n   */\n  findFromStore(evt, store, full = false) {\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l\n          }\n          let [, callback,] = l\n\n          return callback\n        })\n    }\n    return false\n  }\n\n  /**\n   * Similar to the findFromStore, but remove\n   * @param {string} evt event name\n   * @param {object} store the store to remove from\n   * @return {boolean} false when not found\n   */\n  removeFromStore(evt, store) {\n    if (store.has(evt)) {\n      this.logger('($off)', evt)\n\n      store.delete(evt)\n    \n      return true\n    }\n    return false\n  }\n\n  /**\n   * Take out from addToStore for reuse \n   * @param {object} store the store to use \n   * @param {string} evt event name\n   * @return {object} the set within the store \n   */\n  getStoreSet(store, evt) {\n    let fnSet\n    if (store.has(evt)) {\n      this.logger(`(addToStore) \"${evt}\" existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger(`(addToStore) create new Set for \"${evt}\"`)\n      // this is new\n      fnSet = new Set()\n    }\n    return fnSet\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    const fnSet = this.getStoreSet(store, evt)\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger(`(addToStore) insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(li => {\n      let [hash,] = li\n      return hash === args[0]\n    }).length\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n      // pristine it means you can add\n      return true\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list\n      return type !== t\n    }).length\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let store = this.lazyStore.get(evtName)\n    \n    this.logger('(checkTypeInLazyStore)', store)\n\n    if (store) {\n    \n      return !!Array\n        .from(store)\n        .filter(li => {\n          let [,,t] = li\n          return t !== type\n        }).length\n    }\n\n    return false\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger(`(addToNormalStore) try to add \"${type}\" --> \"${evt}\" to normal store`)\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n\n      this.logger('(addToNormalStore)', `\"${type}\" --> \"${evt}\" can add to normal store`)\n      \n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store\n      \n      return size\n    }\n\n    return false\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store\n    this.logger(`(addToLazyStore) size: ${size}`)\n    \n    return size\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg]\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n\n}\n"],"names":["const","TAKEN_BY_OTHER_TYPE_ERR","AVAILABLE_TYPES","isRegExp","pat","RegExp","isString","arg","isInt","num","Error","isNaN","parseInt","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","BaseClass","logger","prototypeAccessors","$name","is","this","validateEvt","evt","forEach","e","validate","callback","validateType","type","filter","t","length","run","payload","ctx","$done","Reflect","apply","toArray","hashFnToKey","fn","s","split","reduce","a","b","charCodeAt","hashCode","toString","AliasEventService","options","super","on","$on","args","off","$off","emit","$trigger","once","$once","only","$only","onlyOnce","$onlyOnce","get","$get","replace","$replace","config","context","let","lazyStoreContent","takeFromStore","addToNormalStore","size","content","Array","from","added","normalStore","has","li","$max","evtName","max","$this","method","$callmax","found","nStore","$queue","nSet","ctn","hasOnce","i","ON_MAX_TYPE","_type","delete","addToLazyStore","$call","_args","lazyStore","store","map","removeFromStore","full","findFromStore","value","keep","result","push","$debug","idx","names","stores","Map","maxCountStore","checkMaxStore","tmp","set","storeName","l","getStoreSet","fnSet","Set","addToStore","isArray","checkTypeInLazyStore","add","checkContentExist","checkTypeInStore","all","list","key","_store","obj","__suspend_state__","__pattern__","queueStore","$suspend","__suspend__","$release","$suspendEvent","pattern","regex","getRegex","test","concat","$queues","lastValue","__release__","queue","clear"],"mappings":"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"}