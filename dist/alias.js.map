{"version":3,"file":"alias.js","sources":["../src/constants.mjs","../src/utils.mjs","../src/store.mjs","../src/base.mjs","../src/store-service.mjs","../src/suspend.mjs","../src/event-service.mjs","../alias.mjs"],"sourcesContent":["// group all the repetitive message here\n\nexport const TAKEN_BY_OTHER_TYPE_ERR = 'You are trying to register an event already been taken by other type:'\n\n// use constants for type\nexport const ON_TYPE = 'on'\nexport const ONLY_TYPE = 'only'\nexport const ONCE_TYPE = 'once'\nexport const ONLY_ONCE_TYPE = 'onlyOnce'\nexport const MAX_CALL_TYPE = 'maxAllowCall'\nexport const NEG_RETURN = -1\n\nexport const AVAILABLE_TYPES = [\n  ON_TYPE,\n  ONLY_TYPE,\n  ONCE_TYPE,\n  ONLY_ONCE_TYPE\n]\n// the type which the callMax can execute on\nexport const ON_MAX_TYPES = [\n  ON_TYPE,\n  ONLY_TYPE\n]\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport function hashCode (s) {\n  return s.split('').reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0)\n}\n\n/**\n * wrapper to make sure it string\n * @param {*} input whatever\n * @return {string} output\n */\nexport function hashCode2Str (s) {\n  return hashCode(s) + ''\n}\n\n/**\n * Just check if a pattern is an RegExp object\n * @param {*} pat whatever\n * @return {boolean} false when its not\n */\nexport function isRegExp (pat) {\n  return pat instanceof RegExp\n}\n\n/**\n * check if its string\n * @param {*} arg whatever\n * @return {boolean} false when it's not\n */\nexport function isString (arg) {\n  return typeof arg === 'string'\n}\n\n/**\n * check if it's an integer\n * @param {*} num input number\n * @return {boolean}\n */\nexport function isInt (num) {\n  if (isString(num)) {\n    throw new Error('Wrong type, we want number!')\n  }\n  return !isNaN(parseInt(num))\n}\n\n/**\n * Find from the array by matching the pattern\n * @param {*} pattern a string or RegExp object\n * @return {object} regex object or false when we can not id the input\n */\nexport function getRegex (pattern) {\n  switch (true) {\n    case isRegExp(pattern) === true:\n      return pattern\n    case isString(pattern) === true:\n      return new RegExp(pattern)\n    default:\n      return false\n  }\n}\n\n/**\n * in array\n * @param {array} arr to search\n * @param {*} prop to search\n */\nexport const inArray = (arr, prop) => arr.includes(prop) // 2022 version\n","// Create two WeakMap store as a private keys\nexport const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// setup a base class to put all the don't know where to put methods\nimport { hashCode2Str, isString } from './utils.mjs'\nimport { AVAILABLE_TYPES } from './constants.mjs'\n// main\nexport default class BaseClass {\n  constructor (config = {}) {\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger\n    }\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger () {}\n\n  // for id if the instance is this class\n  get $name () {\n    return 'to1source-event'\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   * @protected\n   */\n  _validateEvt (...evt) {\n    evt.forEach(e => {\n      if (!isString(e)) {\n        this.logger('(validateEvt)', e)\n\n        throw new Error(`Event name must be string type! we got ${typeof e}`)\n      }\n    })\n\n    return true\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   * @protected\n   */\n  _validate (evt, callback) {\n    if (this._validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true\n      }\n    }\n    throw new Error(`callback required to be function type! we got ${typeof callback}`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   * @protected\n   */\n  _validateType (type) {\n    this._validateEvt(type)\n\n    return !!AVAILABLE_TYPES.filter(t => type === t).length\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   * @protected\n   */\n  _run (callback, payload, ctx) {\n    this.logger('(run) callback:', callback, 'payload:', payload, 'context:', ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n\n    return this.$done // return it here first\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   * @protected\n   */\n  _hashFnToKey (fn) {\n    return hashCode2Str(fn.toString())\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray (arg) {\n    return Array.isArray(arg) ? arg : [arg]\n  }\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store.mjs'\nimport {\n  NEG_RETURN,\n  ON_MAX_TYPES\n} from './constants.mjs'\nimport { isInt, inArray } from './utils.mjs'\n// import SuspendClass from './suspend.mjs'\nimport BaseClass from './base.mjs'\n\n// @TODO need to decoup this and make it standalone\nexport default class StoreService extends BaseClass {\n  constructor (config = {}) {\n    super(config)\n\n    this.keep = config.keep\n    // for the $done setter\n    this.result = config.keep ? [] : null\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n    // this is the new throw away map\n    this.maxCountStore = new Map()\n  }\n\n  /**\n   * We need this to pre-check the store, otherwise\n   * the execution will be unable to determine the number of calls\n   * @param {string} evtName event name\n   * @return {number} the count of this store\n   * @protected\n   */\n  getMaxStore (evtName) {\n    return this.maxCountStore.get(evtName) || NEG_RETURN\n  }\n\n  /**\n   * This is one stop shop to check and munipulate the maxStore\n   * @param {*} evtName\n   * @param {*} [max=null]\n   * @return {number} when return -1 means removed\n   * @protected\n   */\n  checkMaxStore (evtName, max = null) {\n    this.logger('===========================================')\n    this.logger('checkMaxStore start', evtName, max)\n    // init the store\n    if (max !== null && isInt(max)) {\n      // because this is the setup phrase we just return the max value\n      this.maxCountStore.set(evtName, max)\n      this.logger(`Setup max store for ${evtName} with ${max}`)\n      return max\n    }\n    if (max === null) {\n      // first check if this exist in the maxStore\n      let value = this.getMaxStore(evtName)\n      this.logger('getMaxStore value', value)\n      if (value !== NEG_RETURN) {\n        if (value > 0) {\n          --value\n        }\n        if (value > 0) {\n          this.maxCountStore.set(evtName, value) // just update the value\n        } else {\n          this.maxCountStore.delete(evtName) // just remove it\n          this.logger(`remove ${evtName} from maxStore`)\n          return NEG_RETURN\n        }\n      }\n      return value\n    }\n    throw new Error(`Expect max to be an integer, but we got ${typeof max} ${max}`)\n  }\n\n  /**\n   * Wrap several get filter ops together to return the callback we are looking for\n   * @param {string} evtName to search for\n   * @return {array} empty array when not found\n   */\n  searchMapEvt (evtName) {\n    const evts = this.$get(evtName, true) // return in full\n    const search = evts.filter(result => {\n      const [,,, type] = result\n      return inArray(ON_MAX_TYPES, type)\n    })\n    return search.length ? search : []\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore (evt, storeName = 'lazyStore') {\n    const store = this[storeName] // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n      if (store.has(evt)) {\n        const content = store.get(evt)\n        this.logger(`(takeFromStore) has \"${evt}\"`, content)\n        store.delete(evt)\n        return content\n      }\n      return false\n    }\n    throw new Error(`\"${storeName}\" is not supported!`)\n  }\n\n  /**\n   * This was part of the $get. We take it out\n   * so we could use a regex to remove more than one event\n   * @param {object} store the store to return from\n   * @param {string} evt event name\n   * @param {boolean} full return just the callback or everything\n   * @return {array|boolean} false when not found\n   */\n  findFromStore (evt, store, full = false) {\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map(list => {\n          if (full) {\n            return list\n          }\n          const [, callback] = list\n          return callback\n        })\n    }\n    return false\n  }\n\n  /**\n   * Similar to the findFromStore, but remove\n   * @param {string} evt event name\n   * @param {object} store the store to remove from\n   * @return {boolean} false when not found\n   */\n  removeFromStore (evt, store) {\n    if (store.has(evt)) {\n      this.logger('($off)', evt)\n      store.delete(evt)\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Take out from addToStore for reuse\n   * @param {object} store the store to use\n   * @param {string} evt event name\n   * @return {object} the set within the store\n   */\n  getStoreSet (store, evt) {\n    let fnSet\n    if (store.has(evt)) {\n      this.logger(`(addToStore) \"${evt}\" existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger(`(addToStore) create new Set for \"${evt}\"`)\n      // this is new\n      fnSet = new Set()\n    }\n    return fnSet\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore (store, evt, ...args) {\n    const fnSet = this.getStoreSet(store, evt)\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        const [,, type] = args\n        if (!this.checkTypeInLazyStore(evt, type)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger('(addToStore) insert new', args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist (args, fnSet) {\n    const list = Array.from(fnSet)\n    return !!list.filter(_list => {\n      const [hash] = _list\n      return hash === args[0]\n    }).length\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore (evtName, type) {\n    this._validateEvt(evtName, type)\n    const all = this.$get(evtName, true)\n    if (all === false) {\n      // pristine it means you can add\n      return true\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      const [,,, t] = list\n      return type !== t\n    }).length\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore (evtName, type) {\n    this._validateEvt(evtName, type)\n    const store = this.lazyStore.get(evtName)\n    this.logger('(checkTypeInLazyStore)', store)\n    if (store) {\n      return !!Array\n        .from(store)\n        .filter(li => {\n          const [,, t] = li\n          return t !== type\n        }).length\n    }\n    return false\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore (evt, type, callback, context = null) {\n    this.logger(`(addToNormalStore) try to add \"${type}\" --> \"${evt}\" to normal store`)\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger('(addToNormalStore)', `\"${type}\" --> \"${evt}\" can add to normal store`)\n\n      const key = this._hashFnToKey(callback)\n      const args = [this.normalStore, evt, key, callback, context, type]\n      const [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store\n\n      return size\n    }\n\n    return false\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore (evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    const args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    const [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store\n    this.logger(`(addToLazyStore) size: ${size}`)\n\n    return size\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore (obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore () {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore (obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this, obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore () {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n}\n","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n/*\nwe use a different way to do the same watch thing now\nthis.watch('suspend', function(value, prop, oldValue) {\n  this.logger(`${prop} set from ${oldValue} to ${value}`)\n  // it means it set the suspend = true then release it\n  if (oldValue === true && value === false) {\n    // we want this happen after the return happens\n    setTimeout(() => {\n      this.release()\n    }, 1)\n  }\n  return value; // we need to return the value to store it\n})\n*/\nimport { getRegex, isRegExp } from './utils.mjs'\nimport StoreService from './store-service.mjs'\n// main\nexport default class SuspendClass extends StoreService {\n  constructor (config) {\n    super(config)\n    // suspend, release and queue\n    this.__suspend_state__ = null\n    // to do this proper we don't use a new prop to hold the event name pattern\n    // @1.2.2 this become an array so we can hold different events\n    this.__pattern__ = []\n    // key value pair store to store the queued calls\n    this.queueStore = new Set()\n  }\n\n  /**\n   * start suspend\n   * @return {void}\n   */\n  $suspend () {\n    this.logger('---> SUSPEND ALL OPS <---')\n    this.__suspend__(true)\n  }\n\n  /**\n   * release the queue\n   * @return {void}\n   */\n  $release () {\n    this.logger('---> RELEASE ALL SUSPENDED QUEUE <---')\n    this.__suspend__(false)\n  }\n\n  /**\n   * suspend event by pattern\n   * @param {array.<string>} patterns the pattern search matches the event name\n   * @return {array} if the pattern return is registered or not\n   */\n  $suspendEvent (...patterns) {\n    return patterns.map(pattern => {\n      const regex = getRegex(pattern)\n      if (isRegExp(regex)) {\n        // check if it's already added\n        if (this.__isPatternRegisterd(regex) === false) {\n          this.__pattern__.push(regex)\n\n          return this.__pattern__.length\n        }\n        return false\n      }\n      throw new Error(`We expect a pattern variable to be string or RegExp, but we got \"${typeof regex}\" instead`)\n    })\n  }\n\n  /**\n   * This is pair with $suspnedEvent to release part of the event queue by the pattern (eventName)\n   * @param {array.<*>} patterns a eventName of partial eventName to create a RegExp\n   * @return {number} should be the number of queue got released\n   */\n  $releaseEvent (...patterns) {\n    return patterns.map(pattern => {\n      this.logger('($releaseEvent)', pattern)\n      const regex = getRegex(pattern)\n      if (isRegExp(regex) && this.__isPatternRegisterd(regex)) {\n        const self = this // not necessary to do this anymore\n\n        return this.__getToReleaseQueue(regex)\n          .map((args, i) => {\n            Reflect.apply(self.$trigger, self, args)\n\n            return i\n          }).reduce((a, b) => ++b, 0)\n      }\n      this.logger('$releaseEvent throw error ==========================>', this.__pattern__, regex)\n      throw new Error(`We expect a pattern variable to be string or RegExp, but we got \"${typeof regex}\" instead`)\n    })\n      .reduce((x, y) => x + y, 0)\n  }\n\n  /**\n   * queuing call up when it's in suspend mode,\n   * it's currently suspending then add to store then the $trigger will do nothing\n   * @param {string} evt the event name\n   * @param {*} args unknown number of arguments\n   * @return {boolean} true when added or false when it's not\n   */\n  $queue (evt, ...args) {\n    switch (true) {\n      case this.__suspend_state__ === true: // this will take priority over the pattern\n        return this.__addToQueueStore(evt, args)\n      case !!this.__pattern__.length === true:\n        // check the pattern and decide if we want to suspend it or not\n        if (this.__pattern__.filter(p => p.test(evt)).length) {\n          return this.__addToQueueStore(evt, args)\n        }\n        this.logger(`($queue) ${evt} NOT added to $queueStore`, this.__pattern__)\n        return false\n      default:\n        this.logger('($queue) get called NOTHING added')\n        return false\n    }\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues () {\n    const size = this.queueStore.size\n    this.logger('($queues)', `size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * The reason is before we call $trigger we need to remove the pattern from queue\n   * otherwise, it will never get release\n   * @param {*} pattern to find the queue\n   * @return {array} queue to get execute\n   * @protected\n   */\n  __getToReleaseQueue (regex) {\n    // first get the list of events in the queue store that match this pattern\n    const list = this.$queues\n      // first index is the eventName\n      .filter(content => regex.test(content[0]))\n      .map(content => {\n        this.logger(`[release] execute ${content[0]} matches ${regex}`, content)\n        // we just remove it\n        this.queueStore.delete(content)\n\n        return content\n      })\n    if (list.length > 0) {\n      // we need to remove this event from the pattern queue array\n      this.__pattern__ = this.__pattern__.filter(p => p.toString() !== regex.toString())\n    }\n\n    return list\n  }\n\n  /**\n   * Wrapper method with a logger\n   * @param {*} evt\n   * @param {*} args\n   * @return {boolean}\n   * @protected\n   */\n  __addToQueueStore (evt, args) {\n    this.logger(`($queue) ${evt} added to $queueStore`, args)\n\n    // @TODO should we check if this already added?\n    // what if that is a multiple call like $on\n    this.queueStore.add([evt].concat(args))\n\n    return true\n  }\n\n  /**\n   * check if certain pattern already registered in the queue\n   * @param {*} pattern\n   * @return {boolean}\n   * @protected\n   */\n  __isPatternRegisterd (pattern) {\n    // this is a bit of a hack to compare two regex Object\n    return !!this.__pattern__.filter(p => (\n      p.toString() === pattern.toString()\n    )).length\n  }\n\n  /**\n   * to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   * @protected\n   */\n  __suspend__ (value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.__suspend_state__\n      this.__suspend_state__ = value\n      this.logger(`($suspend) Change from \"${lastValue}\" --> \"${value}\"`)\n      if (lastValue === true && value === false) {\n        this.__release__()\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value! we got ${typeof value}`)\n    }\n  }\n\n  /**\n   * Release the queue, this is a wholesale release ALL\n   * @return {int} size if any\n   * @protected\n   */\n  __release__ () {\n    const size = this.queueStore.size\n    const pattern = this.__pattern__\n    this.__pattern__ = []\n    this.logger(\n      `(release) was called with ${size}${pattern.length ? ' for \"' + pattern.join(',') + '\"' : ''} item${size > 1 ? 's' : ''}`\n    )\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.logger('(release queue)', queue)\n\n      queue.forEach(args => {\n        this.logger(`[release] execute ${args[0]}`, args)\n\n        Reflect.apply(this.$trigger, this, args)\n      })\n\n      this.queueStore.clear()\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n\n    return size\n  }\n}\n","// The top level\nimport {\n  ON_TYPE,\n  ONLY_TYPE,\n  ONCE_TYPE,\n  ONLY_ONCE_TYPE,\n  TAKEN_BY_OTHER_TYPE_ERR,\n  NEG_RETURN\n} from './constants.mjs'\nimport { isInt } from './utils.mjs'\nimport SuspendClass from './suspend.mjs'\n\n// export\nexport default class EventService extends SuspendClass {\n  /**\n   * class constructor\n   */\n  constructor (config = {}) {\n    super(config)\n  }\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on (evt, callback, context = null) {\n    const type = 'on'\n    this._validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    const lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger(`($on) \"${evt}\" is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger(`($on) ${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0\n    lazyStoreContent.forEach(content => {\n      const [payload, ctx, t] = content\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger('($on)', `call run \"${evt}\"`)\n      this._run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n    this.logger(`($on) return size ${size}`)\n    return size\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once (evt, callback, context = null) {\n    this._validate(evt, callback)\n    const lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    // let nStore = this.normalStore\n    if (lazyStoreContent === false) {\n      this.logger(`($once) \"${evt}\" is not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, ONCE_TYPE, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [payload, ctx, t] = list[0]\n      if (t && t !== ONCE_TYPE) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger('($once)', `call run \"${evt}\"`)\n      this._run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only (evt, callback, context = null) {\n    this._validate(evt, callback)\n    let added = false\n    const lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    const nStore = this.normalStore\n    if (!nStore.has(evt)) {\n      this.logger(`($only) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, ONLY_TYPE, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger(`($only) \"${evt}\" found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach(li => {\n        const [payload, ctx, t] = li\n        if (t && t !== ONLY_TYPE) {\n          throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n        }\n        this.logger(`($only) call run \"${evt}\"`)\n        this._run(callback, payload, context || ctx)\n      })\n    }\n    return added\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD added in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce (evt, callback, context = null) {\n    this._validate(evt, callback)\n    let added = false\n    const lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    const nStore = this.normalStore\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, ONLY_ONCE_TYPE, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [payload, ctx, t] = list[0]\n      if (t && t !== ONLY_ONCE_TYPE) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($onlyOnce) call run \"${evt}\"`)\n      this._run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added\n  }\n\n  /**\n   * change the way how it suppose to work, instead of create another new store\n   * We perform this check on the trigger end, so we set the number max\n   * whenever we call the callback, we increment a value in the store\n   * once it reaches that number we remove that event from the store,\n   * also this will not get add to the lazy store,\n   * which means the event must register before we can fire it\n   * therefore we don't have to deal with the backward check\n   * @param {string} evtName the event to get pre-registered\n   * @param {number} max pass the max amount of callback can add to this event\n   * @param {*} [ctx=null] the context the callback execute in\n   * @return {function} the event handler\n   */\n  $max (evtName, max, ctx = null) {\n    this._validateEvt(evtName)\n    if (isInt(max) && max > 0) {\n      // find this in the normalStore\n      const fnSet = this.$get(evtName, true)\n      if (fnSet !== false) {\n        const evts = this.searchMapEvt(evtName)\n        if (evts.length) {\n          // should only have one anyway\n          const [,,, type] = evts[0]\n          // now init the max store\n          this.checkMaxStore(evtName, max)\n          // this.logger('$max value', value)\n          const _self = this\n          /**\n           * construct the callback\n           * @param {array<*>} args\n           * @return {number}\n           */\n          return function executeMaxCall (...args) {\n            const ctn = _self.getMaxStore(evtName)\n            let value = NEG_RETURN\n            if (ctn > 0) {\n              const fn = _self.$call(evtName, type, ctx)\n              Reflect.apply(fn, _self, args)\n\n              value = _self.checkMaxStore(evtName)\n              if (value === NEG_RETURN) {\n                _self.$off(evtName)\n                return NEG_RETURN\n              }\n            }\n            return value\n          }\n        }\n      }\n      // change in 1.1.1 because we might just call it without knowing if it's register or not\n      this.logger(`The ${evtName} is not registered, can not execute non-existing event at the moment`)\n      return NEG_RETURN\n    }\n    throw new Error(`Expect max to be an integer and greater than zero! But we got [${typeof max}]${max} instead`)\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {*}\n   */\n  $replace (evt, callback, context = null, type = ON_TYPE) {\n    if (this._validateType(type)) {\n      this.$off(evt)\n      const method = this['$' + type]\n      this.logger('($replace)', evt, callback)\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger (evt, payload = [], context = null, type = false) {\n    this._validateEvt(evt)\n    let found = 0\n    // first check the normal store\n    const nStore = this.normalStore\n    this.logger('($trigger) normalStore', nStore)\n    if (nStore.has(evt)) {\n      this.logger(`($trigger) \"${evt}\" found`)\n      // @1.8.0 to add the suspend queue\n      const added = this.$queue(evt, payload, context, type)\n      if (added) {\n        this.logger(`($trigger) Currently suspended \"${evt}\" added to queue, nothing executed. Exit now.`)\n        return false // not executed\n      }\n      const nSet = Array.from(nStore.get(evt))\n      const ctn = nSet.length\n      let hasOnce = false\n      // let hasOnly = false\n      for (let i = 0; i < ctn; ++i) {\n        ++found\n        // this.logger('found', found)\n        const [, callback, ctx, _type] = nSet[i]\n        this.logger(`($trigger) call run for ${type}:${evt}`)\n        this._run(callback, payload, context || ctx)\n        if (_type === 'once' || _type === 'onlyOnce') {\n          hasOnce = true\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found\n  }\n\n  /**\n   * this is an alias to the $trigger - with a different, it returns a fn to call\n   * @NOTE breaking change in V1.6.0 we swap the parameter around\n   * @NOTE breaking change: v1.9.1 it return an function to accept the params as spread\n   * @param {string} evt event name\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call (evt, type = false, context = null) {\n    const ctx = this\n    return function executeCall (...args) {\n      const _args = [evt, args, context, type]\n      return Reflect.apply(ctx.$trigger, ctx, _args)\n    }\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off (evt) {\n    // @TODO we will allow a regex pattern to mass remove event\n    this._validateEvt(evt)\n    const stores = [this.lazyStore, this.normalStore]\n\n    return !!stores\n      .filter(store => store.has(evt))\n      .map(store => this.removeFromStore(evt, store))\n      .length\n  }\n\n  /**\n   * return all the listener bind to that event name\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get (evt, full = false) {\n    // @TODO should we allow the same Regex to search for all?\n    this._validateEvt(evt)\n    const store = this.normalStore\n    return this.findFromStore(evt, store, full)\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done (value) {\n    this.logger('($done) set value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done () {\n    this.logger('($done) get result:', this.result)\n    if (this.keep) {\n      return this.result[this.result.length - 1]\n    }\n    return this.result\n  }\n\n  /**\n   * Take a look inside the stores\n   * @param {number|null} idx of the store, null means all\n   * @return {void}\n   */\n  $debug (idx = null) {\n    const names = ['lazyStore', 'normalStore']\n    const stores = [this.lazyStore, this.normalStore]\n    if (stores[idx]) {\n      this.logger(names[idx], stores[idx])\n    } else {\n      stores.map((store, i) => {\n        this.logger(names[i], store)\n      })\n    }\n  }\n}\n","// this is an alias class that will create several alias method to their counter part\n// that will match up the other EventEmitter library out there for the developer to swap over\n\nimport EventService from './src/event-service.mjs'\n\nexport default class AliasEventService extends EventService {\n  constructor (options = {}) {\n    super(options)\n  }\n\n  on (...args) {\n    return Reflect.apply(this.$on, this, args)\n  }\n\n  off (...args) {\n    return Reflect.apply(this.$off, this, args)\n  }\n\n  emit (...args) {\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  once (...args) {\n    return Reflect.apply(this.$once, this, args)\n  }\n\n  only (...args) {\n    return Reflect.apply(this.$only, this, args)\n  }\n\n  onlyOnce (...args) {\n    return Reflect.apply(this.$onlyOnce, this, args)\n  }\n\n  get (...args) {\n    return Reflect.apply(this.$get, this, args)\n  }\n\n  replace (...args) {\n    return Reflect.apply(this.$replace, this, args)\n  }\n}\n"],"names":["const","TAKEN_BY_OTHER_TYPE_ERR","ON_TYPE","ONLY_TYPE","ONCE_TYPE","ONLY_ONCE_TYPE","NEG_RETURN","AVAILABLE_TYPES","ON_MAX_TYPES","isRegExp","pat","RegExp","isString","arg","isInt","num","Error","isNaN","parseInt","getRegex","pattern","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","BaseClass","config","logger","this","prototypeAccessors","$name","configurable","prototype","_validateEvt","evt","forEach","e","_validate","callback","_validateType","type","filter","t","length","_run","payload","ctx","$done","Reflect","apply","toArray","_hashFnToKey","fn","s","split","reduce","a","b","charCodeAt","hashCode","toString","Array","isArray","StoreService","super","keep","result","normalStore","Map","lazyStore","maxCountStore","getMaxStore","evtName","get","checkMaxStore","max","set","let","value","delete","searchMapEvt","search","$get","includes","takeFromStore","storeName","store","has","content","findFromStore","full","from","map","list","removeFromStore","getStoreSet","fnSet","Set","addToStore","args","checkTypeInLazyStore","add","checkContentExist","size","_list","checkTypeInStore","all","li","addToNormalStore","context","key","ref","_store","addToLazyStore","push","obj","SuspendClass","__suspend_state__","__pattern__","queueStore","$queues","$suspend","__suspend__","$release","$suspendEvent","patterns","regex","__isPatternRegisterd","$releaseEvent","self","__getToReleaseQueue","i","$trigger","x","y","$queue","__addToQueueStore","p","test","concat","lastValue","__release__","join","queue","clear","EventService","$on","lazyStoreContent","$once","$off","$only","added","$onlyOnce","$max","evts","_self","ctn","$call","$replace","method","found","nStore","nSet","hasOnce","_type","_args","$debug","idx","names","stores","AliasEventService","options","constructor","on","off","emit","once","only","onlyOnce","replace"],"mappings":"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"}