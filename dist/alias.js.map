{"version":3,"file":"alias.js","sources":["../src/constants.mjs","../src/utils.mjs","../src/store.mjs","../src/base.mjs","../src/store-service.mjs","../src/suspend.mjs","../src/event-service.mjs","../alias.mjs"],"sourcesContent":["// group all the repetitive message here\n\nexport const TAKEN_BY_OTHER_TYPE_ERR = 'You are trying to register an event already been taken by other type:'\n\n// use constants for type\nexport const ON_TYPE = 'on'\nexport const ONLY_TYPE = 'only'\nexport const ONCE_TYPE = 'once'\nexport const ONLY_ONCE_TYPE = 'onlyOnce'\nexport const MAX_CALL_TYPE = 'maxAllowCall'\nexport const NEG_RETURN = -1\n\nexport const AVAILABLE_TYPES = [\n  ON_TYPE,\n  ONLY_TYPE,\n  ONCE_TYPE,\n  ONLY_ONCE_TYPE\n]\n// the type which the callMax can execute on\nexport const ON_MAX_TYPES = [\n  ON_TYPE,\n  ONLY_TYPE\n]\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n\n/**\n * wrapper to make sure it string\n * @param {*} input whatever\n * @return {string} output\n */\nexport function hashCode2Str(s) {\n  return hashCode(s) + ''\n}\n\n/**\n * Just check if a pattern is an RegExp object\n * @param {*} pat whatever\n * @return {boolean} false when its not\n */\nexport function isRegExp(pat) {\n  return pat instanceof RegExp\n}\n\n/**\n * check if its string\n * @param {*} arg whatever\n * @return {boolean} false when it's not\n */\nexport function isString(arg) {\n  return typeof arg === 'string'\n}\n\n/**\n * check if it's an integer\n * @param {*} num input number\n * @return {boolean}\n */\nexport function isInt(num) {\n  if (isString(num)) {\n    throw new Error(`Wrong type, we want number!`)\n  }\n  return !isNaN(parseInt(num))\n}\n\n/**\n * Find from the array by matching the pattern\n * @param {*} pattern a string or RegExp object\n * @return {object} regex object or false when we can not id the input\n */\nexport function getRegex(pattern) {\n  switch (true) {\n    case isRegExp(pattern) === true:\n      return pattern\n    case isString(pattern) === true:\n      return new RegExp(pattern)\n    default:\n      return false\n  }\n}\n\n/**\n * in array\n * @param {array} arr to search\n * @param {*} prop to search\n */\n // export const inArray = (arr, prop) => !!arr.filter(v => prop === v).length\n export const inArray = (arr, prop) => arr.includes(prop) // 2022 version\n","// Create two WeakMap store as a private keys\nexport const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// setup a base class to put all the don't know where to put methods\nimport { hashCode2Str, isString } from './utils.mjs'\nimport { AVAILABLE_TYPES } from './constants.mjs'\n// main\nexport default class BaseClass {\n\n  constructor(config = {}) {\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger\n    }\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  // for id if the instance is this class\n  get $name() {\n    return 'to1source-event'\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   * @protected\n   */\n  _validateEvt(...evt) {\n    evt.forEach(e => {\n      if (!isString(e)) {\n        this.logger('(validateEvt)', e)\n\n        throw new Error(`Event name must be string type! we got ${typeof e}`)\n      }\n    })\n\n    return true\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   * @protected\n   */\n  _validate(evt, callback) {\n    if (this._validateEvt(evt)) {\n      if (typeof callback === 'function') {\n\n        return true\n      }\n    }\n    throw new Error(`callback required to be function type! we got ${typeof callback}`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   * @protected\n   */\n  _validateType(type) {\n    this._validateEvt(type)\n\n    return !!AVAILABLE_TYPES.filter(t => type === t).length\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   * @protected\n   */\n  _run(callback, payload, ctx) {\n    this.logger('(run) callback:', callback, 'payload:', payload, 'context:', ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n\n    return this.$done // return it here first\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   * @protected\n   */\n  _hashFnToKey(fn) {\n    return hashCode2Str(fn.toString())\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg]\n  }\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store.mjs'\nimport {\n  NEG_RETURN,\n  ON_MAX_TYPES\n} from './constants.mjs'\nimport { isInt, inArray } from './utils.mjs'\n// import SuspendClass from './suspend.mjs'\nimport BaseClass from './base.mjs'\n\n// @TODO need to decoup this and make it standalone\nexport default class StoreService extends BaseClass {\n\n  constructor(config = {}) {\n    super(config)\n\n    this.keep = config.keep\n    // for the $done setter\n    this.result = config.keep ? [] : null\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n    // this is the new throw away map\n    this.maxCountStore = new Map()\n  }\n\n  /**\n   * We need this to pre-check the store, otherwise\n   * the execution will be unable to determine the number of calls\n   * @param {string} evtName event name\n   * @return {number} the count of this store\n   * @protected\n   */\n  getMaxStore(evtName) {\n    return this.maxCountStore.get(evtName) || NEG_RETURN\n  }\n\n  /**\n   * This is one stop shop to check and munipulate the maxStore\n   * @param {*} evtName\n   * @param {*} [max=null]\n   * @return {number} when return -1 means removed\n   * @protected\n   */\n  checkMaxStore(evtName, max = null) {\n    this.logger(`===========================================`)\n    this.logger('checkMaxStore start', evtName, max)\n    // init the store\n    if (max !== null && isInt(max)) {\n      // because this is the setup phrase we just return the max value\n      this.maxCountStore.set(evtName, max)\n      this.logger(`Setup max store for ${evtName} with ${max}`)\n      return max\n    }\n    if (max === null) {\n      // first check if this exist in the maxStore\n      let value = this.getMaxStore(evtName)\n\n      this.logger('getMaxStore value', value)\n\n      if (value !== NEG_RETURN) {\n        if (value > 0) {\n          --value\n        }\n        if (value > 0) {\n          this.maxCountStore.set(evtName, value) // just update the value\n        } else {\n          this.maxCountStore.delete(evtName) // just remove it\n          this.logger(`remove ${evtName} from maxStore`)\n          return NEG_RETURN\n        }\n      }\n      return value\n    }\n    throw new Error(`Expect max to be an integer, but we got ${typeof max} ${max}`)\n  }\n\n  /**\n   * Wrap several get filter ops together to return the callback we are looking for\n   * @param {string} evtName to search for\n   * @return {array} empty array when not found\n   */\n  searchMapEvt(evtName) {\n    const evts = this.$get(evtName, true) // return in full\n    const search = evts.filter(result => {\n      const [ ,,,type ] = result\n\n      return inArray(ON_MAX_TYPES, type)\n    })\n\n    return search.length ? search : []\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName] // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger(`(takeFromStore) has \"${evt}\"`, content)\n        store.delete(evt)\n\n        return content\n      }\n\n      return false\n    }\n    throw new Error(`\"${storeName}\" is not supported!`)\n  }\n\n  /**\n   * This was part of the $get. We take it out\n   * so we could use a regex to remove more than one event\n   * @param {object} store the store to return from\n   * @param {string} evt event name\n   * @param {boolean} full return just the callback or everything\n   * @return {array|boolean} false when not found\n   */\n  findFromStore(evt, store, full = false) {\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( list => {\n          if (full) {\n            return list\n          }\n          let [, callback,] = list\n\n          return callback\n        })\n    }\n    return false\n  }\n\n  /**\n   * Similar to the findFromStore, but remove\n   * @param {string} evt event name\n   * @param {object} store the store to remove from\n   * @return {boolean} false when not found\n   */\n  removeFromStore(evt, store) {\n    if (store.has(evt)) {\n      this.logger('($off)', evt)\n      store.delete(evt)\n\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Take out from addToStore for reuse\n   * @param {object} store the store to use\n   * @param {string} evt event name\n   * @return {object} the set within the store\n   */\n  getStoreSet(store, evt) {\n    let fnSet\n    if (store.has(evt)) {\n      this.logger(`(addToStore) \"${evt}\" existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger(`(addToStore) create new Set for \"${evt}\"`)\n      // this is new\n      fnSet = new Set()\n    }\n    return fnSet\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    const fnSet = this.getStoreSet(store, evt)\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,type] = args\n        if (!this.checkTypeInLazyStore(evt, type)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger(`(addToStore) insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(_list => {\n      let [hash,] = _list\n      return hash === args[0]\n    }).length\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this._validateEvt(evtName, type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n      // pristine it means you can add\n      return true\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list\n      return type !== t\n    }).length\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this._validateEvt(evtName, type)\n    let store = this.lazyStore.get(evtName)\n    this.logger('(checkTypeInLazyStore)', store)\n\n    if (store) {\n\n      return !!Array\n        .from(store)\n        .filter(li => {\n          let [,,t] = li\n          return t !== type\n        }).length\n    }\n\n    return false\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger(`(addToNormalStore) try to add \"${type}\" --> \"${evt}\" to normal store`)\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n\n      this.logger('(addToNormalStore)', `\"${type}\" --> \"${evt}\" can add to normal store`)\n\n      let key = this._hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store\n\n      return size\n    }\n\n    return false\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store\n    this.logger(`(addToLazyStore) size: ${size}`)\n\n    return size\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n}\n","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n/*\nwe use a different way to do the same watch thing now\nthis.watch('suspend', function(value, prop, oldValue) {\n  this.logger(`${prop} set from ${oldValue} to ${value}`)\n  // it means it set the suspend = true then release it\n  if (oldValue === true && value === false) {\n    // we want this happen after the return happens\n    setTimeout(() => {\n      this.release()\n    }, 1)\n  }\n  return value; // we need to return the value to store it\n})\n*/\nimport { getRegex, isRegExp } from './utils.mjs'\nimport StoreService from './store-service.mjs'\n// main\nexport default class SuspendClass extends StoreService {\n\n  constructor(config) {\n    super(config)\n    // suspend, release and queue\n    this.__suspend_state__ = null\n    // to do this proper we don't use a new prop to hold the event name pattern\n    // @1.2.2 this become an array so we can hold different events\n    this.__pattern__ = []\n    // key value pair store to store the queued calls\n    this.queueStore = new Set()\n  }\n\n  /**\n   * start suspend\n   * @return {void}\n   */\n  $suspend() {\n    this.logger(`---> SUSPEND ALL OPS <---`)\n    this.__suspend__(true)\n  }\n\n  /**\n   * release the queue\n   * @return {void}\n   */\n  $release() {\n    this.logger(`---> RELEASE ALL SUSPENDED QUEUE <---`)\n    this.__suspend__(false)\n  }\n\n  /**\n   * suspend event by pattern\n   * @param {array.<string>} patterns the pattern search matches the event name\n   * @return {array} if the pattern return is registered or not\n   */\n  $suspendEvent(...patterns) {\n    return patterns.map(pattern => {\n      const regex = getRegex(pattern)\n      if (isRegExp(regex)) {\n        // check if it's already added\n        if (this.__isPatternRegisterd(regex) === false) {\n          this.__pattern__.push(regex)\n\n          return this.__pattern__.length\n        }\n        return false\n      }\n      throw new Error(`We expect a pattern variable to be string or RegExp, but we got \"${typeof regex}\" instead`)\n    })\n  }\n\n  /**\n   * This is pair with $suspnedEvent to release part of the event queue by the pattern (eventName)\n   * @param {array.<*>} patterns a eventName of partial eventName to create a RegExp\n   * @return {number} should be the number of queue got released\n   */\n  $releaseEvent(...patterns) {\n    return patterns.map(pattern => {\n      this.logger(`($releaseEvent)`, pattern)\n      const regex = getRegex(pattern)\n      if (isRegExp(regex) && this.__isPatternRegisterd(regex)) {\n        const self = this // not necessary to do this anymore\n\n        return this.__getToReleaseQueue(regex)\n          .map((args, i) => {\n            Reflect.apply(self.$trigger, self, args)\n\n            return i\n          }).reduce((a, b) => ++b, 0)\n      }\n      this.logger('$releaseEvent throw error ==========================>', this.__pattern__, regex)\n      throw new Error(`We expect a pattern variable to be string or RegExp, but we got \"${typeof regex}\" instead`)\n    })\n    .reduce((x, y) => x + y, 0)\n  }\n\n  /**\n   * queuing call up when it's in suspend mode,\n   * it's currently suspending then add to store then the $trigger will do nothing\n   * @param {string} evt the event name\n   * @param {*} args unknown number of arguments\n   * @return {boolean} true when added or false when it's not\n   */\n  $queue(evt, ...args) {\n    switch (true) {\n      case this.__suspend_state__ === true: // this will take priority over the pattern\n\n        return this.__addToQueueStore(evt, args)\n      case !!this.__pattern__.length === true:\n        // check the pattern and decide if we want to suspend it or not\n        if (!!this.__pattern__.filter(p => p.test(evt)).length) {\n\n          return this.__addToQueueStore(evt, args)\n        }\n        this.logger(`($queue) ${evt} NOT added to $queueStore`, this.__pattern__)\n\n        return false\n      default:\n        this.logger('($queue) get called NOTHING added')\n        return false\n    }\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size\n    this.logger('($queues)', `size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * The reason is before we call $trigger we need to remove the pattern from queue\n   * otherwise, it will never get release\n   * @param {*} pattern to find the queue\n   * @return {array} queue to get execute\n   * @protected\n   */\n  __getToReleaseQueue(regex) {\n    // first get the list of events in the queue store that match this pattern\n    const list = this.$queues\n      // first index is the eventName\n      .filter(content => regex.test(content[0]))\n      .map(content => {\n        this.logger(`[release] execute ${content[0]} matches ${regex}`, content)\n            // we just remove it\n        this.queueStore.delete(content)\n\n        return content\n      })\n    if (list.length > 0) {\n      // we need to remove this event from the pattern queue array\n      this.__pattern__ = this.__pattern__.filter(p => p.toString() !== regex.toString())\n    }\n\n    return list\n  }\n\n  /**\n   * Wrapper method with a logger\n   * @param {*} evt\n   * @param {*} args\n   * @return {boolean}\n   * @protected\n   */\n  __addToQueueStore(evt, args) {\n    this.logger(`($queue) ${evt} added to $queueStore`, args)\n\n    // @TODO should we check if this already added?\n    // what if that is a multiple call like $on\n    this.queueStore.add([evt].concat(args))\n\n    return true\n  }\n\n  /**\n   * check if certain pattern already registered in the queue\n   * @param {*} pattern\n   * @return {boolean}\n   * @protected\n   */\n  __isPatternRegisterd(pattern) {\n    // this is a bit of a hack to compare two regex Object\n    return !!this.__pattern__.filter(p => (\n      p.toString() === pattern.toString()\n    )).length\n  }\n\n  /**\n   * to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   * @protected\n   */\n  __suspend__(value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.__suspend_state__\n      this.__suspend_state__ = value\n      this.logger(`($suspend) Change from \"${lastValue}\" --> \"${value}\"`)\n      if (lastValue === true && value === false) {\n        this.__release__()\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value! we got ${typeof value}`)\n    }\n  }\n\n  /**\n   * Release the queue, this is a wholesale release ALL\n   * @return {int} size if any\n   * @protected\n   */\n   __release__() {\n    let size = this.queueStore.size\n    let pattern = this.__pattern__\n    this.__pattern__ = []\n\n    this.logger(`(release) was called with ${size}${pattern.length ? ' for \"' + pattern.join(',') + '\"': ''} item${size > 1 ? 's' : ''}`)\n\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.logger('(release queue)', queue)\n\n      queue.forEach(args => {\n        this.logger(`[release] execute ${args[0]}`, args)\n\n        Reflect.apply(this.$trigger, this, args)\n      })\n\n      this.queueStore.clear()\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n\n    return size\n  }\n}\n","// The top level\nimport {\n  ON_TYPE,\n  ONLY_TYPE,\n  ONCE_TYPE,\n  ONLY_ONCE_TYPE,\n  TAKEN_BY_OTHER_TYPE_ERR,\n  NEG_RETURN\n} from './constants.mjs'\nimport { isInt } from './utils.mjs'\nimport SuspendClass from './suspend.mjs'\n\n// export\nexport default class EventService extends SuspendClass {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on'\n    this._validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger(`($on) \"${evt}\" is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger(`($on) ${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($on)`, `call run \"${evt}\"`)\n      this._run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n\n    this.logger(`($on) return size ${size}`)\n    return size\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this._validate(evt, callback)\n\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    // let nStore = this.normalStore\n    if (lazyStoreContent === false) {\n      this.logger(`($once) \"${evt}\" is not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, ONCE_TYPE, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== ONCE_TYPE) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger('($once)', `call run \"${evt}\"`)\n      this._run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this._validate(evt, callback)\n\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n\n    if (!nStore.has(evt)) {\n      this.logger(`($only) \"${evt}\" add to normalStore`)\n\n      added = this.addToNormalStore(evt, ONLY_TYPE, callback, context)\n    }\n\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger(`($only) \"${evt}\" found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( li => {\n        const [ payload, ctx, t ] = li\n        if (t && t !== ONLY_TYPE) {\n          throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n        }\n        this.logger(`($only) call run \"${evt}\"`)\n        this._run(callback, payload, context || ctx)\n      })\n    }\n\n    return added\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD added in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this._validate(evt, callback)\n\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce) \"${evt}\" add to normalStore`)\n\n      added = this.addToNormalStore(evt, ONLY_ONCE_TYPE, callback, context)\n    }\n\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== ONLY_ONCE_TYPE) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($onlyOnce) call run \"${evt}\"`)\n      this._run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added\n  }\n\n  /**\n   * change the way how it suppose to work, instead of create another new store\n   * We perform this check on the trigger end, so we set the number max\n   * whenever we call the callback, we increment a value in the store\n   * once it reaches that number we remove that event from the store,\n   * also this will not get add to the lazy store,\n   * which means the event must register before we can fire it\n   * therefore we don't have to deal with the backward check\n   * @param {string} evtName the event to get pre-registered\n   * @param {number} max pass the max amount of callback can add to this event\n   * @param {*} [ctx=null] the context the callback execute in\n   * @return {function} the event handler\n   */\n  $max(evtName, max, ctx = null) {\n    this._validateEvt(evtName)\n    if (isInt(max) && max > 0) {\n      // find this in the normalStore\n      const fnSet = this.$get(evtName, true)\n      if (fnSet !== false) {\n        const evts = this.searchMapEvt(evtName)\n        if (evts.length) {\n          // should only have one anyway\n          const [,,,type] = evts[0]\n          // now init the max store\n          const value = this.checkMaxStore(evtName, max)\n          const _self = this\n          /**\n           * construct the callback\n           * @param {array<*>} args\n           * @return {number}\n           */\n          return function executeMaxCall(...args) {\n            const ctn = _self.getMaxStore(evtName)\n            let value = NEG_RETURN\n            if (ctn > 0) {\n              const fn = _self.$call(evtName, type, ctx)\n              Reflect.apply(fn, _self, args)\n\n              value = _self.checkMaxStore(evtName)\n              if (value === NEG_RETURN) {\n                _self.$off(evtName)\n                return NEG_RETURN\n              }\n            }\n            return value\n          }\n        }\n      }\n      // change in 1.1.1 because we might just call it without knowing if it's register or not\n      this.logger(`The ${evtName} is not registered, can not execute non-existing event at the moment`)\n      return NEG_RETURN\n    }\n    throw new Error(`Expect max to be an integer and greater than zero! But we got [${typeof max}]${max} instead`)\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {*}\n   */\n  $replace(evt, callback, context = null, type = ON_TYPE) {\n    if (this._validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n      this.logger(`($replace)`, evt, callback)\n\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this._validateEvt(evt)\n    let found = 0\n    // first check the normal store\n    let nStore = this.normalStore\n    this.logger('($trigger) normalStore', nStore)\n    if (nStore.has(evt)) {\n      this.logger(`($trigger) \"${evt}\" found`)\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      if (added) {\n        this.logger(`($trigger) Currently suspended \"${evt}\" added to queue, nothing executed. Exit now.`)\n        return false // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length\n      let hasOnce = false\n      // let hasOnly = false\n      for (let i=0; i < ctn; ++i) {\n        ++found\n        // this.logger('found', found)\n        let [ _, callback, ctx, _type ] = nSet[i]\n        this.logger(`($trigger) call run for ${type}:${evt}`)\n        this._run(callback, payload, context || ctx)\n        if (_type === 'once' || _type === 'onlyOnce') {\n          hasOnce = true\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found\n  }\n\n  /**\n   * this is an alias to the $trigger - with a different, it returns a fn to call\n   * @NOTE breaking change in V1.6.0 we swap the parameter around\n   * @NOTE breaking change: v1.9.1 it return an function to accept the params as spread\n   * @param {string} evt event name\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, type = false, context = null) {\n    const ctx = this\n\n    return function executeCall(...args) {\n      let _args = [evt, args, context, type]\n\n      return Reflect.apply(ctx.$trigger, ctx, _args)\n    }\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    // @TODO we will allow a regex pattern to mass remove event\n    this._validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n\n    return !!stores\n          .filter(store => store.has(evt))\n          .map(store => this.removeFromStore(evt, store))\n          .length\n  }\n\n  /**\n   * return all the listener bind to that event name\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    // @TODO should we allow the same Regex to search for all?\n    this._validateEvt(evt)\n    let store = this.normalStore\n    return this.findFromStore(evt, store, full)\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('($done) set value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    this.logger('($done) get result:', this.result)\n    if (this.keep) {\n      return this.result[this.result.length - 1]\n    }\n    return this.result\n  }\n\n  /**\n   * Take a look inside the stores\n   * @param {number|null} idx of the store, null means all\n   * @return {void}\n   */\n  $debug(idx = null) {\n    let names = ['lazyStore', 'normalStore']\n    let stores = [this.lazyStore, this.normalStore]\n    if (stores[idx]) {\n      this.logger(names[idx], stores[idx])\n    } else {\n      stores.map((store, i) => {\n        this.logger(names[i], store)\n      })\n    }\n  }\n}\n","// this is an alias class that will create several alias method to their counter part\n// that will match up the other EventEmitter library out there for the developer to swap over\n\nimport EventService from './src/event-service.mjs'\n\nexport default class AliasEventService extends EventService {\n\n  constructor(options = {}) {\n    super(options)\n  }\n\n  on(...args) {\n    return Reflect.apply(this.$on, this, args)\n  }\n\n  off(...args) {\n    return Reflect.apply(this.$off, this, args)\n  }\n\n  emit(...args) {\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  once(...args) {\n    return Reflect.apply(this.$once, this, args)\n  }\n\n  only(...args) {\n    return Reflect.apply(this.$only, this, args)\n  }\n\n  onlyOnce(...args) {\n    return Reflect.apply(this.$onlyOnce, this, args)\n  }\n\n  get(...args) {\n    return Reflect.apply(this.$get, this, args)\n  }\n\n  replace(...args) {\n    return Reflect.apply(this.$replace, this, args)\n  }\n}\n"],"names":["const","TAKEN_BY_OTHER_TYPE_ERR","ON_TYPE","ONLY_TYPE","ONCE_TYPE","ONLY_ONCE_TYPE","NEG_RETURN","AVAILABLE_TYPES","ON_MAX_TYPES","isRegExp","pat","RegExp","isString","arg","isInt","num","Error","isNaN","parseInt","getRegex","pattern","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","BaseClass","config","logger","this","prototypeAccessors","$name","configurable","prototype","_validateEvt","evt","forEach","e","_validate","callback","_validateType","type","filter","t","length","_run","payload","ctx","$done","Reflect","apply","toArray","_hashFnToKey","fn","s","split","reduce","a","b","charCodeAt","hashCode","toString","Array","isArray","StoreService","super","call","keep","result","normalStore","Map","lazyStore","maxCountStore","getMaxStore","evtName","get","checkMaxStore","max","set","let","value","delete","searchMapEvt","search","$get","includes","takeFromStore","storeName","store","has","content","findFromStore","full","from","map","list","removeFromStore","getStoreSet","fnSet","Set","addToStore","args","checkTypeInLazyStore","add","checkContentExist","size","_list","checkTypeInStore","all","li","addToNormalStore","context","key","ref","_store","addToLazyStore","push","obj","SuspendClass","__suspend_state__","__pattern__","queueStore","$queues","$suspend","__suspend__","$release","$suspendEvent","patterns","regex","__isPatternRegisterd","$releaseEvent","self","__getToReleaseQueue","i","$trigger","x","y","$queue","__addToQueueStore","p","test","concat","lastValue","__release__","join","queue","clear","EventService","$on","lazyStoreContent","$once","$off","$only","added","$onlyOnce","$max","evts","_self","ctn","$call","$replace","method","found","nStore","nSet","hasOnce","_type","_args","$debug","idx","names","stores","AliasEventService","options","constructor","on","off","emit","once","only","onlyOnce","replace"],"mappings":"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"}