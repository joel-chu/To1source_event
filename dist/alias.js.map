{"version":3,"file":"alias.js","sources":["../src/store.js","../src/suspend.js","../src/alias.js","../src/event-service.js","../src/store-service.js","../src/hash-code.js"],"sourcesContent":["export const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n\nexport default class SuspendClass {\n\n  constructor() {\n    // suspend, release and queue\n    this.suspend = null;\n    this.queueStore = new Set()\n    /*\n    this.watch('suspend', function(value, prop, oldValue) {\n      this.logger(`${prop} set from ${oldValue} to ${value}`)\n      // it means it set the suspend = true then release it\n      if (oldValue === true && value === false) {\n        // we want this happen after the return happens\n        setTimeout(() => {\n          this.release()\n        }, 1)\n      }\n      return value; // we need to return the value to store it\n    })\n    */\n  }\n\n  /**\n   * setter to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   */\n  set $suspend(value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.suspend;\n      this.suspend = value;\n      this.logger('($suspend)', `${lastValue} chnage to ${value}`)\n      if (lastValue === true && value === false) {\n        this.release()\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value!`)\n    }\n  }\n\n  /**\n   * queuing call up when it's in suspend mode\n   * @param {any} value\n   * @return {Boolean} true when added or false when it's not\n   */\n  $queue(...args) {\n    if (this.suspend === true) {\n      this.logger('($queue)', 'added to $queue', args)\n      // there shouldn't be any duplicate ...\n      this.queueStore.add(args)\n    }\n    return this.suspend;\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size;\n    this.logger('($queues)', `$queues size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * Release the queue\n   * @return {int} size if any\n   */\n  release() {\n    let size = this.queueStore.size\n    this.logger('(release)', `Release was called ${size}`)\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.queueStore.clear()\n      this.logger('queue', queue)\n      queue.forEach(args => {\n        this.logger(args)\n        Reflect.apply(this.$trigger, this, args)\n      })\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n  }\n}\n","// this is an alias class that will create several alias method to their counter part\n// that will match up the other EventEmitter library out there for the developer to swap over\n\nimport EventService from './event-service'\n\nexport default class AliasEventService extends EventService {\n\n  constructor(options = {}) {\n    super(options)\n  }\n\n  on(...args) {\n    return Reflect.apply(this.$on, this, args)\n  }\n\n  off(...args) {\n    return Reflect.apply(this.$off, this, args)\n  }\n\n  emit(...args) {\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  once(...args) {\n    return Reflect.apply(this.$once, this, args)\n  }\n\n  only(...args) {\n    return Reflect.apply(this.$only, this, args)\n  }\n\n  onlyOnce(...args) {\n    return Reflect.apply(this.$onlyOnce, this, args)\n  }\n\n  get(...args) {\n    return Reflect.apply(this.$get, this, args)\n  }\n\n  replace(...args) {\n    return Reflect.apply(this.$replace, this, args)\n  }\n}\n","// The top level\nimport NbStoreService from './store-service'\n// export\nexport default class EventService extends NbStoreService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on';\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger('($on)', `${evt} callback is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger('($on)', `${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0;\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content;\n      if (t && t !== type) {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n    return size;\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n    const type = 'once';\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (lazyStoreContent === false) {\n      this.logger('($once)', `${evt} not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, type, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== type) {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'only';\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`($only)`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($only)', `${evt} found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( l => {\n        const [ payload, ctx, t ] = l;\n        if (t && t !== type) {\n          throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n        }\n        this.run(callback, payload, context || ctx)\n      })\n    }\n    return added;\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD adeed in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'onlyOnce';\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce)`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== 'onlyOnce') {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added;\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {}\n   */\n  $replace(evt, callback, context = null, type = 'on') {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0;\n    // first check the normal store\n    let nStore = this.normalStore;\n    this.logger('($trigger)', 'normalStore', nStore)\n    if (nStore.has(evt)) {\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      this.logger('($trigger)', evt, 'found; add to queue: ', added)\n      if (added === true) {\n        return false; // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length;\n      let hasOnce = false;\n      let hasOnly = false;\n      for (let i=0; i < ctn; ++i) {\n        ++found;\n        // this.logger('found', found)\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.run(callback, payload, context || ctx)\n        if (type === 'once' || type === 'onlyOnce') {\n          hasOnce = true;\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found;\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found;\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter around\n   * @param {string} evt event name\n   * @param {*} params pass to the callback\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, params, type = false, context = null) {\n    let args = [evt, params]\n    args.push(context, type)\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n    let found = false;\n    stores.forEach(store => {\n      if (store.has(evt)) {\n        found = true;\n        store.delete(evt)\n      }\n    })\n    return found;\n  }\n\n  /**\n   * return all the listener from the event\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    this.validateEvt(evt)\n    let store = this.normalStore;\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l;\n          }\n          let [key, callback, ] = l;\n          return callback;\n        })\n    }\n    return false;\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('($done)', 'value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value;\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    if (this.keep) {\n      this.logger('(get $done)', this.result)\n      return this.result[this.result.length - 1]\n    }\n    return this.result;\n  }\n\n\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport genHaskKey from './hash-code'\nimport SuspendClass from './suspend'\n\nexport default class NbEventServiceBase extends SuspendClass {\n\n  constructor(config = {}) {\n    super()\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger;\n    }\n    this.keep = config.keep;\n    // for the $done setter\n    this.result = config.keep ? [] : null;\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(...evt) {\n    evt.forEach(e => {\n      if (typeof e !== 'string') {\n        this.logger('(validateEvt)', e)\n        throw new Error(`event name must be string type!`)\n      }\n    })\n    return true;\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true;\n      }\n    }\n    throw new Error(`callback required to be function type!`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    const types = ['on', 'only', 'once', 'onlyOnce']\n    return !!types.filter(t => type === t).length;\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('(run)', callback, payload, ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName]; // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger('(takeFromStore)', `has ${evt}`, content)\n        store.delete(evt)\n        return content;\n      }\n      return false;\n    }\n    throw new Error(`${storeName} is not supported!`)\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet;\n    if (store.has(evt)) {\n      this.logger('(addToStore)', `${evt} existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger('(addToStore)', `create new Set for ${evt}`)\n      // this is new\n      fnSet = new Set()\n    }\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args;\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger('(addToStore)', `insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(l => {\n      let [hash,] = l;\n      if (hash === args[0]) {\n        return true;\n      }\n      return false;\n    }).length;\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n       // pristine it means you can add\n      return true;\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list;\n      return type !== t;\n    }).length;\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let store = this.lazyStore.get(evtName)\n    this.logger('(checkTypeInLazyStore)', store)\n    if (store) {\n      return !!Array\n        .from(store)\n        .filter(l => {\n          let [,,t] = l;\n          return t !== type;\n        }).length\n    }\n    return false;\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger('(addToNormalStore)', evt, type, 'try to add to normal store')\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger('(addToNormalStore)', `${type} can add to ${evt} store`)\n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store;\n      return size;\n    }\n    return false;\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store;\n    return size;\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg];\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return genHaskKey(fn.toString()) + '';\n  }\n}\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport default function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n"],"names":["const","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","SuspendClass","this","suspend","queueStore","Set","prototypeAccessors","$suspend","value","Error","lastValue","logger","release","$queue","args","add","$queues","size","Array","from","queue","clear","forEach","Reflect","apply","$trigger","options","super","on","$on","off","$off","emit","once","$once","only","$only","onlyOnce","$onlyOnce","get","$get","replace","$replace","config","evt","callback","context","validate","let","lazyStoreContent","takeFromStore","addToNormalStore","content","t","run","payload","ctx","normalStore","added","has","l","type","validateType","method","validateEvt","found","nStore","nSet","ctn","length","hasOnce","i","delete","addToLazyStore","$call","params","push","stores","lazyStore","store","full","map","$done","keep","result","Map","e","filter","toArray","storeName","addToStore","fnSet","isArray","checkTypeInLazyStore","checkContentExist","set","checkTypeInStore","evtName","all","list","key","hashFnToKey","_store","arg","obj","fn","toString","split","reduce","a","b","charCodeAt"],"mappings":"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"}