{"version":3,"file":"nb-event-service.umd.js","sources":["../src/constants.js","../src/store.js","../src/suspend.js","../src/event-service.js","../src/store-service.js","../src/hash-code.js"],"sourcesContent":["// group all the repetitive message here\n\nexport const TAKEN_BY_OTHER_TYPE_ERR = 'You are trying to register an event already been taken by other type:'\n","// Create two WeakMap store as a private keys\nexport const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n/*\nwe use a different way to do the same watch thing now\nthis.watch('suspend', function(value, prop, oldValue) {\n  this.logger(`${prop} set from ${oldValue} to ${value}`)\n  // it means it set the suspend = true then release it\n  if (oldValue === true && value === false) {\n    // we want this happen after the return happens\n    setTimeout(() => {\n      this.release()\n    }, 1)\n  }\n  return value; // we need to return the value to store it\n})\n*/\n\nexport default class SuspendClass {\n\n  constructor() {\n    // suspend, release and queue\n    this.__suspend_state__ = null\n    // to do this proper we don't use a new prop to hold the event name pattern\n    this.__pattern__ = null\n    this.queueStore = new Set()\n  }\n\n  /**\n   * start suspend\n   * @return {void}\n   */\n  $suspend() {\n    this.logger(`---> SUSPEND ALL OPS <---`)\n    this.__suspend__(true)\n  }\n\n  /**\n   * release the queue\n   * @return {void}\n   */\n  $release() {\n    this.logger(`---> RELEASE SUSPENDED QUEUE <---`)\n    this.__suspend__(false)\n  }\n\n  /**\n   * suspend event by pattern\n   * @param {string} pattern the pattern search matches the event name\n   * @return {void}\n   */\n  $suspendByPattern(pattern) {\n    if (pattern && typeof pattern === 'string') {\n      this.__pattern__ = pattern\n      this.$suspend()\n    }\n    throw new Error(`We expect a pattern variable to be string, but got ${typeof pattern}`)\n  }\n\n  /**\n   * queuing call up when it's in suspend mode\n   * @param {string} evt the event name\n   * @param {*} args unknown number of arguments\n   * @return {boolean} true when added or false when it's not\n   */\n  $queue(evt, ...args) {\n    this.logger('($queue) get called')\n    if (this.__suspend_state__ === true) {\n      if (this.__pattern__ !== null) {\n        // check the pattern and decide if we want to suspend it or not\n        \n      }\n\n      this.logger('($queue) added to $queue', args)\n      // @TODO there shouldn't be any duplicate, but how to make sure?\n      this.queueStore.add([evt].concat(args))\n      // return this.queueStore.size\n    }\n    return !!this.__suspend_state__\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size\n    this.logger('($queues)', `size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   */\n  __suspend__(value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.__suspend_state__\n      this.__suspend_state__ = value\n      this.logger(`($suspend) Change from \"${lastValue}\" --> \"${value}\"`)\n      if (lastValue === true && value === false) {\n        this.__release__()\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value! we got ${typeof value}`)\n    }\n  }\n\n  /**\n   * Release the queue\n   * @return {int} size if any\n   */\n  __release__() {\n    let size = this.queueStore.size\n    this.logger('(release)', `Release was called with ${size} item${size > 1 ? 's' : ''}`)\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.queueStore.clear()\n      this.logger('(release queue)', queue)\n      queue.forEach(args => {\n        this.logger(args)\n        Reflect.apply(this.$trigger, this, args)\n      })\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n\n    return size\n  }\n}\n","// The top level\nimport { TAKEN_BY_OTHER_TYPE_ERR } from './constants'\nimport NbStoreService from './store-service'\n// export\nexport default class EventService extends NbStoreService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on'\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger(`($on) \"${evt}\" is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger(`($on) ${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($on)`, `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n\n    this.logger(`($on) return size ${size}`)\n    return size\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n    const type = 'once'\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (lazyStoreContent === false) {\n      this.logger(`($once) \"${evt}\" is not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, type, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== type) {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger('($once)', `call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'only'\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore\n    if (!nStore.has(evt)) {\n      this.logger(`($only) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger(`($only) \"${evt}\" found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( li => {\n        const [ payload, ctx, t ] = li\n        if (t && t !== type) {\n          throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n        }\n        this.logger(`($only) call run \"${evt}\"`)\n        this.run(callback, payload, context || ctx)\n      })\n    }\n    return added\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD added in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'onlyOnce'\n    let added = false\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce) \"${evt}\" add to normalStore`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== 'onlyOnce') {\n        throw new Error(`${TAKEN_BY_OTHER_TYPE_ERR} ${t}`)\n      }\n      this.logger(`($onlyOnce) call run \"${evt}\"`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {}\n   */\n  $replace(evt, callback, context = null, type = 'on') {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n      this.logger(`($replace)`, evt, callback)\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0\n    // first check the normal store\n    let nStore = this.normalStore\n    this.logger('($trigger) normalStore', nStore)\n    if (nStore.has(evt)) {\n      this.logger(`($trigger) \"${evt}\" found`)\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      if (added) {\n        this.logger(`($trigger) Currently suspended \"${evt}\" added to queue, nothing executed. Exit now.`)\n        return false // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length\n      let hasOnce = false\n      let hasOnly = false\n      for (let i=0; i < ctn; ++i) {\n        ++found;\n        // this.logger('found', found)\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.logger(`($trigger) call run for ${evt}`)\n        this.run(callback, payload, context || ctx)\n        if (type === 'once' || type === 'onlyOnce') {\n          hasOnce = true;\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter aroun\n   * @NOTE breaking change: v1.9.1 it return an function to accept the params as spread\n   * @param {string} evt event name\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, type = false, context = null) {\n    const ctx = this\n\n    return (...args) => {\n      let _args = [evt, args, context, type]\n      return Reflect.apply(ctx.$trigger, ctx, _args)\n    }\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n\n    return !!stores.filter(store => store.has(evt))\n          .map(store => {\n            this.logger('($off)', evt)\n            store.delete(evt)\n          }).length\n  }\n\n  /**\n   * return all the listener bind to that event name\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    this.validateEvt(evt)\n    let store = this.normalStore\n    if (store.has(evt)) {\n\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l\n          }\n          let [key, callback, ] = l\n          return callback\n        })\n    }\n    return false\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('($done) set value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    this.logger('($done) get result:', this.result)\n    if (this.keep) {\n      return this.result[this.result.length - 1]\n    }\n    return this.result\n  }\n\n  /**\n   * Take a look inside the stores\n   * @param {number|null} idx of the store, null means all\n   * @return {void}\n   */\n  $debug(idx = null) {\n    let names = ['lazyStore', 'normalStore']\n    let stores = [this.lazyStore, this.normalStore]\n    if (stores[idx]) {\n      this.logger(names[idx], stores[idx])\n    } else {\n      stores.map((store, i) => {\n        this.logger(names[i], store)\n      })\n    }\n  }\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport { hashCode2Str } from './hash-code'\nimport SuspendClass from './suspend'\n\nexport default class NbEventServiceBase extends SuspendClass {\n\n  constructor(config = {}) {\n    super()\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger\n    }\n    this.keep = config.keep\n    // for the $done setter\n    this.result = config.keep ? [] : null\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  // for id if the instance is this class\n  get is() {\n    return 'nb-event-service'\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(...evt) {\n    evt.forEach(e => {\n      if (typeof e !== 'string') {\n        this.logger('(validateEvt)', e)\n        throw new Error(`Event name must be string type! we got ${typeof e}`)\n      }\n    })\n    return true\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true\n      }\n    }\n    throw new Error(`callback required to be function type! we got ${typeof callback}`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    const _type = (type+'').toLowerCase()\n    const types = ['on', 'only', 'once', 'onlyOnce']\n    return !!types.filter(t => _type === t).length\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('(run) callback:', callback, 'payload:', payload, 'context:', ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName] // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger(`(takeFromStore) has \"${evt}\"`, content)\n        store.delete(evt)\n        return content\n      }\n      return false\n    }\n    throw new Error(`\"${storeName}\" is not supported!`)\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet\n    if (store.has(evt)) {\n      this.logger(`(addToStore) \"${evt}\" existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger(`(addToStore) create new Set for \"${evt}\"`)\n      // this is new\n      fnSet = new Set()\n    }\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger(`(addToStore) insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(li => {\n      let [hash,] = li\n      return hash === args[0]\n    }).length\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n      // pristine it means you can add\n      return true\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list\n      return type !== t\n    }).length\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let store = this.lazyStore.get(evtName)\n    this.logger('(checkTypeInLazyStore)', store)\n    if (store) {\n      return !!Array\n        .from(store)\n        .filter(li => {\n          let [,,t] = li\n          return t !== type\n        }).length\n    }\n    return false\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger(`(addToNormalStore) try to add \"${type}\" --> \"${evt}\" to normal store`)\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger('(addToNormalStore)', `\"${type}\" --> \"${evt}\" can add to normal store`)\n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store\n      return size\n    }\n    return false\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store\n    this.logger(`(addToLazyStore) size: ${size}`)\n    return size\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg]\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return hashCode2Str(fn.toString())\n  }\n}\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n// wrapper to make sure it string \nexport function hashCode2Str(s) {\n  return hashCode(s) + ''\n}\n"],"names":["const","TAKEN_BY_OTHER_TYPE_ERR","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","SuspendClass","this","__suspend_state__","__pattern__","queueStore","Set","$suspend","logger","__suspend__","$release","$suspendByPattern","pattern","Error","$queue","evt","args","add","concat","prototypeAccessors","$queues","size","Array","from","value","lastValue","__release__","queue","clear","forEach","Reflect","apply","$trigger","config","super","$on","callback","context","validate","let","lazyStoreContent","takeFromStore","addToNormalStore","content","t","run","payload","ctx","$once","normalStore","$off","$only","added","has","li","$onlyOnce","$replace","type","validateType","method","validateEvt","found","nStore","nSet","get","ctn","length","hasOnce","i","delete","addToLazyStore","$call","_args","lazyStore","filter","store","map","$get","full","l","$done","keep","result","push","$debug","idx","names","stores","Map","is","e","_type","toLowerCase","toArray","storeName","addToStore","fnSet","isArray","checkTypeInLazyStore","checkContentExist","set","checkTypeInStore","evtName","all","list","key","hashFnToKey","_store","arg","obj","fn","s","split","reduce","a","b","charCodeAt","hashCode","toString"],"mappings":"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"}