{"version":3,"file":"nb-event-service.js","sources":["../src/store.js","../src/event-service.js","../src/hash-code.js"],"sourcesContent":["export const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// this is the new implementation without the hash key\n// only using Map and Set instead\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport genHaskKey from './hash-code.js'\n// export\nexport default class EventService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger;\n    }\n    // for the $done setter\n    this.result = null;\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  /**\n   * logger for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on';\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger('$on', `${evt} callback is not in lazy store`)\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger('$on', `${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0;\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx ] = content;\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n    return size;\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @return {boolean} result\n   */\n  $once(evt , callback , context) {\n    this.validate(evt, callback)\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    if (lazyStoreContent === false) {\n      this.logger('$once', `${evt} not in the lazy store`)\n      // check to see if this already exist in the normal store\n      let nStore = this.normalStore;\n      if (!nStore.has(evt)) {\n        this.logger('$once', `${evt} add to normal store`)\n        return this.addToNormalStore(evt, 'once', callback, context)\n      }\n      this.logger('$once', `${evt} already existed`)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('$once', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx ] = list[0];\n      this.run(callback, payload, context || ctx)\n    }\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object} [context = null] overwrite what stored\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null) {\n    this.validateEvt(evt)\n    let found = 0;\n    // first check the normal store\n    let nStore = this.normalStore;\n    this.logger('$trigger', nStore)\n    if (nStore.has(evt)) {\n      this.logger('$trigger', evt, 'found')\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length;\n      for (let i=0; i<ctn; ++i) {\n        found = i;\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.run(callback, payload, context || ctx)\n        if (type === 'once') {\n          nStore.delete(evt)\n          return i;\n        }\n      }\n      return found;\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context)\n    return found;\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @param {array} args spread\n   */\n  $call(...args) {\n    this.logger('$call')\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n    let found = false;\n    stores.forEach(store => {\n      if (store.has(evt)) {\n        found = true;\n        store.delete(evt)\n      }\n    })\n    return found;\n  }\n\n  /**\n   * return all the listener from the event\n   * @param {string} evtName event name\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt) {\n    this.validateEvt(evt)\n    let store = this.normalStore;\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          let [key, callback, ] = l;\n          return callback;\n        })\n    }\n    return false;\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.result = value;\n  }\n\n  /**\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    return this.result;\n  }\n\n  /////////////////////////////\n  //    PRIVATE METHODS      //\n  /////////////////////////////\n\n  /**\n   * validate the event name\n   * @param {string} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(evt) {\n    if (typeof evt === 'string') {\n      return true;\n    }\n    throw new Error(`event name must be string type!`)\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true;\n      }\n    }\n    throw new Error(`callback required to be function type!`)\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('run', callback)\n    this.logger('run', payload)\n    this.logger('run', ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName]; // it could be empty at this point\n    this.logger('takeFromStore', storeName, store)\n    if (store.has(evt)) {\n      let content = store.get(evt)\n      this.logger('takeFromStore', content)\n      store.delete(evt)\n      return content;\n    }\n    return false;\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet;\n    if (store.has(evt)) {\n      this.logger('addToStore', `${evt} existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger('addToStore', `create new Set for ${evt}`)\n      // this is new\n      fnSet = new Set()\n    }\n    let ctn = args.length;\n    // lazy only store 2 items!\n    if (ctn > 2) {\n      if (!this.checkContentExist(args, fnSet)) {\n        this.logger('addToStore', `insert new`, args)\n        fnSet.add(args)\n      }\n    } else { // just add if this is a lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(l => {\n      let [hash,] = l;\n      if (hash === args[0]) {\n        return true;\n      }\n      return false;\n    }).length;\n  }\n\n  /**\n   * wrapper to re-use the addToStore\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger('addToNormalStore', evt, type, 'add to normal store')\n    let key = this.hashFnToKey(callback)\n    let [_store, size] = this.addToStore(this.normalStore, evt, key, callback, context, type)\n    this.normalStore = _store;\n    return size;\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} context the context the callback execute in\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null) {\n    let [_store, size] = this.addToStore(this.lazyStore, evt, this.toArray(payload), context)\n    this.lazyStore = _store;\n    return size;\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg];\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return genHaskKey(fn.toString()) + '';\n  }\n\n}\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport default function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n"],"names":["const","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","EventService","config","logger","this","result","normalStore","Map","lazyStore","$on","evt","callback","context","validate","lazyStoreContent","takeFromStore","addToNormalStore","let","size","forEach","content","this$1","run","payload","ctx","$once","has","Array","from","$trigger","validateEvt","found","nStore","nSet","get","ctn","length","i","type","delete","addToLazyStore","$call","Reflect","apply","args","$off","stores","store","$get","map","l","prototypeAccessors","$done","value","Error","toArray","storeName","addToStore","fnSet","Set","checkContentExist","add","set","filter","key","hashFnToKey","_store","arg","isArray","obj","fn","toString","split","reduce","a","b","charCodeAt"],"mappings":"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"}