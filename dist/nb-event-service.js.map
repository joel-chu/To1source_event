{"version":3,"file":"nb-event-service.js","sources":["../src/store.js","../src/watch.js","../src/event-service.js","../src/privates.js","../src/hash-code.js","../src/suspend.js"],"sourcesContent":["export const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// a polyfill to create global watch method\n// from https://abdulapopoola.com/2015/04/17/how-to-watch-variables-in-javascript/\n// without own modification to make it NOT polluting the global prototype chain\nclass WatchClass {}\n\nif (!WatchClass.prototype.watch) {\n Object.defineProperty(WatchClass.prototype, \"watch\", {\n     enumerable: false,\n     configurable: true,\n     writable: false,\n     value: function (prop, handler) {\n       var old = this[prop];\n       var cur = old;\n       var getter = function () {\n          return cur;\n       }\n       var setter = function (val) {\n        old = cur;\n        // We change the order of the params\n        cur = handler.call(this, val, prop, old)\n\n        return cur;\n       }\n\n       // can't watch constants\n       if (delete this[prop]) {\n        Object.defineProperty(this,prop,{\n            get: getter,\n            set: setter,\n            enumerable: true,\n            configurable: true\n        })\n       }\n    }\n })\n}\n\n// instead of polluting the global prototype we create this as an class method instead\nexport { WatchClass }\n","import NbEventServiceBase from './privates'\n// export\nexport default class EventService extends NbEventServiceBase {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on';\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger('$on', `${evt} callback is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger('$on', `${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0;\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content;\n      if (t && t !== type) {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n    return size;\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n    const type = 'once';\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (lazyStoreContent === false) {\n      this.logger('$once', `${evt} not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, type, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('$once', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== type) {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'only';\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`$only`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('$only', `${evt} found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( l => {\n        const [ payload, ctx, t ] = l;\n        if (t && t !== type) {\n          throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n        }\n        this.run(callback, payload, context || ctx)\n      })\n    }\n    return added;\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD adeed in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'onlyOnce';\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`$onlyOnce`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('$onlyOnce', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== 'onlyOnce') {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added;\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {}\n   */\n  $replace(evt, callback, context = null, type = 'on') {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0;\n    // first check the normal store\n    let nStore = this.normalStore;\n    this.logger('$trigger', nStore)\n    if (nStore.has(evt)) {\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      this.logger('$trigger', evt, 'found; add to queue: ', added)\n      if (added === true) {\n        return false; // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length;\n      let hasOnce = false;\n      let hasOnly = false;\n      for (let i=0; i < ctn; ++i) {\n        ++found;\n        // this.logger('found', found)\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.run(callback, payload, context || ctx)\n        if (type === 'once' || type === 'onlyOnce') {\n          hasOnce = true;\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found;\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found;\n  }\n  \n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter around\n   * @param {string} evt event name\n   * @param {*} params pass to the callback\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, params, type = false, context = null) {\n    let args = [evt, params]\n    args.push(context, type)\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n    let found = false;\n    stores.forEach(store => {\n      if (store.has(evt)) {\n        found = true;\n        store.delete(evt)\n      }\n    })\n    return found;\n  }\n\n  /**\n   * return all the listener from the event\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    this.validateEvt(evt)\n    let store = this.normalStore;\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l;\n          }\n          let [key, callback, ] = l;\n          return callback;\n        })\n    }\n    return false;\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('set $done', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value;\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    if (this.keep) {\n      this.logger(this.result)\n      return this.result[this.result.length - 1]\n    }\n    return this.result;\n  }\n\n\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport genHaskKey from './hash-code'\nimport SuspendClass from './suspend'\n\nexport default class NbEventServiceBase extends SuspendClass {\n\n  constructor(config) {\n    super()\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger;\n    }\n    this.keep = config.keep;\n    // for the $done setter\n    this.result = config.keep ? [] : null;\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n\n  }\n\n  /**\n   * validate the event name\n   * @param {string} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(evt) {\n    if (typeof evt === 'string') {\n      return true;\n    }\n    throw new Error(`event name must be string type!`)\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true;\n      }\n    }\n    throw new Error(`callback required to be function type!`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    const types = ['on', 'only', 'once', 'onlyOnce']\n    return !!types.filter(t => type === t).length;\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('run', callback, payload, ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName]; // it could be empty at this point\n    if (store) {\n      this.logger('takeFromStore', storeName, store)\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger('takeFromStore', content)\n        store.delete(evt)\n        return content;\n      }\n      return false;\n    }\n    throw new Error(`${storeName} is not supported!`)\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet;\n    if (store.has(evt)) {\n      this.logger('addToStore', `${evt} existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger('addToStore', `create new Set for ${evt}`)\n      // this is new\n      fnSet = new Set()\n    }\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args;\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger('addToStore', `insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(l => {\n      let [hash,] = l;\n      if (hash === args[0]) {\n        return true;\n      }\n      return false;\n    }).length;\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName)\n    this.validateEvt(type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n       // pristine it means you can add\n      return true;\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list;\n      return type !== t;\n    }).length;\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName)\n    this.validateEvt(type)\n    let store = this.lazyStore.get(evtName)\n    this.logger('checkTypeInLazyStore', store)\n    if (store) {\n      return !!Array\n        .from(store)\n        .filter(l => {\n          let [,,t] = l;\n          return t !== type;\n        }).length\n    }\n    return false;\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger('addToNormalStore', evt, type, 'add to normal store')\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger(`${type} can add to ${evt} store`)\n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store;\n      return size;\n    }\n    return false;\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store;\n    return size;\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg];\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return genHaskKey(fn.toString()) + '';\n  }\n}\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport default function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n","// making all the functionality on it's own\nimport { WatchClass } from './watch'\n\nexport default class SuspendClass extends WatchClass {\n\n  constructor() {\n    super()\n    // suspend, release and queue\n    this.suspend = null;\n    this.queueStore = new Set()\n    this.watch('suspend', function(value, prop, oldValue) {\n      this.logger(`${prop} set from ${oldValue} to ${value}`)\n      // it means it set the suspend = true then release it\n      if (oldValue === true && value === false) {\n        // we want this happen after the return happens\n        setTimeout(() => {\n          this.release()\n        }, 1)\n      }\n      return value; // we need to return the value to store it\n    })\n  }\n\n  /**\n   * setter to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   */\n  set $suspend(value) {\n    if (typeof value === 'boolean') {\n      this.suspend = value;\n    } else {\n      throw new Error(`$suspend only accept Boolean value!`)\n    }\n  }\n\n  /**\n   * queuing call up when it's in suspend mode\n   * @param {any} value\n   * @return {Boolean} true when added or false when it's not\n   */\n  $queue(...args) {\n    if (this.suspend === true) {\n      // there shouldn't be any duplicate ...\n      this.queueStore.add(args)\n    }\n    return this.suspend;\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * Release the queue\n   * @return {int} size if any\n   */\n  release() {\n    let size = this.queueStore.size\n    this.logger(`Release was called ${size}`)\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.queueStore.clear()\n      this.logger('queue', queue)\n      queue.forEach(args => {\n        this.logger(args)\n        Reflect.apply(this.$trigger, this, args)\n      })\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n  }\n}\n"],"names":["const","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","WatchClass","prototype","watch","Object","defineProperty","enumerable","configurable","writable","value","prop","handler","old","this","cur","get","set","val","call","config","super","logger","$on","evt","callback","context","validate","let","lazyStoreContent","takeFromStore","addToNormalStore","size","forEach","content","t","Error","run","payload","ctx","$once","normalStore","Array","from","$off","$only","added","has","l","$onlyOnce","$replace","type","validateType","method","Reflect","apply","$trigger","validateEvt","found","nStore","$queue","nSet","ctn","length","hasOnce","i","delete","addToLazyStore","$call","params","args","push","stores","lazyStore","store","$get","full","map","prototypeAccessors","$done","keep","result","Map","filter","toArray","storeName","addToStore","fnSet","Set","isArray","checkTypeInLazyStore","add","checkContentExist","checkTypeInStore","evtName","all","list","key","hashFnToKey","_store","arg","obj","fn","toString","split","reduce","a","b","charCodeAt","suspend","queueStore","oldValue","setTimeout","release","$suspend","$queues","queue","clear"],"mappings":"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"}