{"version":3,"file":"nb-event-service.js","sources":["../src/store.js","../src/event-service.js","../src/hash-code.js"],"sourcesContent":["export const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// this is the new implementation without the hash key\n// only using Map and Set instead\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport genHaskKey from './hash-code.js'\n// export\nexport default class EventService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger;\n    }\n    this.keep = config.keep;\n    // for the $done setter\n    this.result = config.keep ? [] : null;\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on';\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger('$on', `${evt} callback is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger('$on', `${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0;\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content;\n      if (t && t !== type) {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n    return size;\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n    const type = 'once';\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (lazyStoreContent === false) {\n      this.logger('$once', `${evt} not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, type, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('$once', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== type) {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'only';\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`$only`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('$only', `${evt} found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( l => {\n        const [ payload, ctx, t ] = l;\n        if (t && t !== type) {\n          throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n        }\n        this.run(callback, payload, context || ctx)\n      })\n    }\n    return added;\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD adeed in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'onlyOnce';\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`$onlyOnce`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('$onlyOnce', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== 'onlyOnce') {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added;\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {}\n   */\n  $replace(evt, callback, context = null, type = 'on') {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0;\n    // first check the normal store\n    let nStore = this.normalStore;\n    this.logger('$trigger', nStore)\n    if (nStore.has(evt)) {\n      this.logger('$trigger', evt, 'found')\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length;\n      let hasOnce = false;\n      let hasOnly = false;\n      for (let i=0; i < ctn; ++i) {\n        ++found;\n        // this.logger('found', found)\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.run(callback, payload, context || ctx)\n        if (type === 'once' || type === 'onlyOnce') {\n          hasOnce = true;\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found;\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found;\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter around\n   * @param {string} evt event name\n   * @param {*} params pass to the callback\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, params, type = false, context = null) {\n    let args = [evt, params]\n    args.push(context, type)\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n    let found = false;\n    stores.forEach(store => {\n      if (store.has(evt)) {\n        found = true;\n        store.delete(evt)\n      }\n    })\n    return found;\n  }\n\n  /**\n   * return all the listener from the event\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    this.validateEvt(evt)\n    let store = this.normalStore;\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l;\n          }\n          let [key, callback, ] = l;\n          return callback;\n        })\n    }\n    return false;\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('set $done', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value;\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    if (this.keep) {\n      this.logger(this.result)\n      return this.result[this.result.length - 1]\n    }\n    return this.result;\n  }\n\n  /////////////////////////////\n  //    PRIVATE METHODS      //\n  /////////////////////////////\n\n  /**\n   * validate the event name\n   * @param {string} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(evt) {\n    if (typeof evt === 'string') {\n      return true;\n    }\n    throw new Error(`event name must be string type!`)\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true;\n      }\n    }\n    throw new Error(`callback required to be function type!`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    const types = ['on', 'only', 'once', 'onlyOnce']\n    return !!types.filter(t => type === t).length;\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('run', callback, payload, ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName]; // it could be empty at this point\n    if (store) {\n      this.logger('takeFromStore', storeName, store)\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger('takeFromStore', content)\n        store.delete(evt)\n        return content;\n      }\n      return false;\n    }\n    throw new Error(`${storeName} is not supported!`)\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet;\n    if (store.has(evt)) {\n      this.logger('addToStore', `${evt} existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger('addToStore', `create new Set for ${evt}`)\n      // this is new\n      fnSet = new Set()\n    }\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args;\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger('addToStore', `insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(l => {\n      let [hash,] = l;\n      if (hash === args[0]) {\n        return true;\n      }\n      return false;\n    }).length;\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName)\n    this.validateEvt(type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n       // pristine it means you can add\n      return true;\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list;\n      return type !== t;\n    }).length;\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName)\n    this.validateEvt(type)\n    let store = this.lazyStore.get(evtName)\n    this.logger('checkTypeInLazyStore', store)\n    if (store) {\n      return !!Array\n        .from(store)\n        .filter(l => {\n          let [,,t] = l;\n          return t !== type;\n        }).length\n    }\n    return false;\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger('addToNormalStore', evt, type, 'add to normal store')\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger(`${type} can add to ${evt} store`)\n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store;\n      return size;\n    }\n    return false;\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store;\n    return size;\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg];\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return genHaskKey(fn.toString()) + '';\n  }\n\n}\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport default function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n"],"names":["const","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","EventService","config","logger","this","keep","result","normalStore","Map","lazyStore","$on","evt","callback","context","validate","lazyStoreContent","takeFromStore","addToNormalStore","let","size","forEach","content","t","Error","this$1","run","payload","ctx","$once","Array","from","$off","$only","added","has","l","$onlyOnce","$replace","type","validateType","method","Reflect","apply","$trigger","validateEvt","found","nStore","nSet","get","ctn","length","hasOnce","i","delete","addToLazyStore","$call","params","args","push","stores","store","$get","full","map","prototypeAccessors","$done","value","filter","toArray","storeName","addToStore","fnSet","Set","isArray","checkTypeInLazyStore","add","checkContentExist","set","checkTypeInStore","evtName","all","list","key","hashFnToKey","_store","arg","obj","fn","toString","split","reduce","a","b","charCodeAt"],"mappings":"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"}