{"version":3,"file":"nb-event-service.js","sources":["../src/store.js","../src/event-service.js"],"sourcesContent":["export const NB_EVENT_SERVICE_PRIVATE_STORE = new Map()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new Map()\n","// this is the new implementation without the hash key\n// only using Map and Set instead\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\n\nexport default class EventService {\n\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger;\n    }\n    // for the $done setter\n    this.result = null;\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  /**\n   * logger for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on';\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger('$on', `${evt} callback is not in lazy store`)\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger('$on', `${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0;\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx ] = content;\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n    return size;\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @return {boolean} result\n   */\n  $once(evt , callback , context) {\n    this.validate(evt, callback)\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    if (lazyStoreContent === false) {\n      // check to see if this already exist in the normal store\n      let nStore = this.normalStore;\n      if (!nStore.has(evt)) {\n        return this.addToNormalStore(evt, 'once', callback, context)\n      }\n    }\n    // now this is the tricky bit\n    // there is a potential bug here that cause by the developer\n    // if they call $trigger first, the lazy won't know it's a once call\n    // so if in the middle they regiseter any call with the same evt name\n    // then this $once call will be fucked - add this to the documentation\n    const [ payload, ctx ] = lazyStoreContent;\n    this.run(callback, payload, context || ctx)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object} [context = null] overwrite what stored\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null) {\n    this.validateEvt(evt)\n    let found = 0;\n    // first check the normal store\n    let nStore = this.normalStore;\n    if (nStore.has(evt)) {\n      let nSet = nStore.get(evt)\n      // now loop it over\n      nSet.forEach( s => {\n        ++found;\n        const [ callback, ctx, type ] = s;\n        this.run(callback, payload, context || ctx)\n        if (type === 'once') {\n          nStore.delete(evt)\n          return found;\n        }\n      })\n      return found;\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context)\n    return found;\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @param {array} args spread\n   */\n  $call(...args) {\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n    let found = false;\n    stores.forEach(store => {\n      if (store.has(evt)) {\n        found = true;\n        store.delete(evt)\n      }\n    })\n    return found;\n  }\n\n  /**\n   * return all the listener from the event\n   * @param {string} evtName event name\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt) {\n    this.validateEvt(evt)\n    let fns = [];\n    let store = this.normalStore;\n    if (store.has(evt)) {\n      let list = store.get(evt)\n      list.forEach( l => {\n        let [callback] = l;\n        fns.push(callback)\n      })\n      return fns;\n    }\n    return false;\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.result = value;\n  }\n\n  /**\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    return this.result;\n  }\n\n  /////////////////////////////\n  //    PRIVATE METHODS      //\n  /////////////////////////////\n\n  /**\n   * validate the event name\n   * @param {string} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(evt) {\n    if (typeof evt === 'string') {\n      return true;\n    }\n    throw new Error(`event name must be string type!`)\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true;\n      }\n    }\n    throw new Error(`callback required to be function type!`)\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger(callback)\n    this.logger(payload)\n    this.logger(ctx)\n    Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName]; // it could be empty at this point\n    this.logger(storeName, store)\n    if (store.has(evt)) {\n      let content = store.get(evt)\n      store.delete(evt)\n      return content;\n    }\n    return false;\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet;\n    if (store.has(evt)) {\n      this.logger(`${evt} existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger(`create new Set for ${evt}`)\n      // this is new\n      fnSet = new Set()\n    }\n\n    this.logger(args)\n\n    let check = fnSet.has(args)\n\n    this.logger(`checking is this existed [${check}]`)\n\n    fnSet.add(args)\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * wrapper to re-use the addToStore\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context) {\n    this.logger(evt, type, 'add to normal store')\n    let [_store, size] = this.addToStore(this.normalStore, evt, callback, context, type)\n    this.normalStore = _store;\n    return size;\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} context the context the callback execute in\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null) {\n    let [_store, size] = this.addToStore(this.lazyStore, evt, this.toArray(payload), context)\n    this.lazyStore = _store;\n    return size;\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg];\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n}\n"],"names":["const","NB_EVENT_SERVICE_PRIVATE_STORE","Map","NB_EVENT_SERVICE_PRIVATE_LAZY","EventService","config","logger","this","result","normalStore","lazyStore","$on","evt","callback","context","validate","lazyStoreContent","takeFromStore","addToNormalStore","let","size","forEach","content","this$1","run","payload","ctx","$once","has","$trigger","validateEvt","found","nStore","get","s","type","delete","addToLazyStore","$call","Reflect","apply","args","$off","stores","store","$get","fns","l","push","prototypeAccessors","$done","value","Error","toArray","storeName","addToStore","fnSet","Set","check","add","set","_store","arg","Array","isArray","obj"],"mappings":"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"}