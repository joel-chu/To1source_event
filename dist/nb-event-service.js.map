{"version":3,"file":"nb-event-service.js","sources":["../src/store.js","../src/event-service.js","../src/hash-code.js"],"sourcesContent":["export const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// this is the new implementation without the hash key\n// only using Map and Set instead\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport genHaskKey from './hash-code.js'\n// export\nexport default class EventService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger;\n    }\n    this.keep = config.keep;\n    // for the $done setter\n    this.result = config.keep ? [] : null;\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on';\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger('$on', `${evt} callback is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger('$on', `${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0;\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx ] = content;\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n    return size;\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (lazyStoreContent === false) {\n      this.logger('$once', `${evt} not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, 'once', callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('$once', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx ] = list[0]\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`$only`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, 'only', callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('$only', `${evt} found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( l => {\n        const [ payload, ctx ] = l;\n        this.run(callback, payload, context || ctx)\n      })\n    }\n    return added;\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`$onlyOnce`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, 'onlyOnce', callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('$onlyOnce', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx ] = list[0]\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added;\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object} [context = null] overwrite what stored\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null) {\n    this.validateEvt(evt)\n    let found = 0;\n    // first check the normal store\n    let nStore = this.normalStore;\n    this.logger('$trigger', nStore)\n    if (nStore.has(evt)) {\n      this.logger('$trigger', evt, 'found')\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length;\n      let hasOnce = false;\n      let hasOnly = false;\n      for (let i=0; i < ctn; ++i) {\n        ++found;\n        // this.logger('found', found)\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.run(callback, payload, context || ctx)\n        if (type === 'once' || type === 'onlyOnce') {\n          hasOnce = true;\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found;\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context)\n    return found;\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @param {array} args spread\n   */\n  $call(...args) {\n    this.logger('$call', args)\n    return Reflect.apply(this.$trigger, this, args)\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n    let found = false;\n    stores.forEach(store => {\n      if (store.has(evt)) {\n        found = true;\n        store.delete(evt)\n      }\n    })\n    return found;\n  }\n\n  /**\n   * return all the listener from the event\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    this.validateEvt(evt)\n    let store = this.normalStore;\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l;\n          }\n          let [key, callback, ] = l;\n          return callback;\n        })\n    }\n    return false;\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('set $done', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value;\n    }\n  }\n\n  /**\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    if (this.keep) {\n      this.logger(this.result)\n      return this.result[this.result.length - 1]\n    }\n    return this.result;\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   *\n   */\n\n\n  /////////////////////////////\n  //    PRIVATE METHODS      //\n  /////////////////////////////\n\n  /**\n   * validate the event name\n   * @param {string} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(evt) {\n    if (typeof evt === 'string') {\n      return true;\n    }\n    throw new Error(`event name must be string type!`)\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true;\n      }\n    }\n    throw new Error(`callback required to be function type!`)\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('run', callback, payload, ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName]; // it could be empty at this point\n    this.logger('takeFromStore', storeName, store)\n    if (store.has(evt)) {\n      let content = store.get(evt)\n      this.logger('takeFromStore', content)\n      store.delete(evt)\n      return content;\n    }\n    return false;\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet;\n    if (store.has(evt)) {\n      this.logger('addToStore', `${evt} existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger('addToStore', `create new Set for ${evt}`)\n      // this is new\n      fnSet = new Set()\n    }\n    let ctn = args.length;\n    // lazy only store 2 items!\n    if (ctn > 2) {\n      if (!this.checkContentExist(args, fnSet)) {\n        this.logger('addToStore', `insert new`, args)\n        fnSet.add(args)\n      }\n    } else { // just add if this is a lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(l => {\n      let [hash,] = l;\n      if (hash === args[0]) {\n        return true;\n      }\n      return false;\n    }).length;\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName)\n    this.validateEvt(type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n       // pristine it means you can add\n      return true;\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list;\n      return type !== t;\n    }).length;\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger('addToNormalStore', evt, type, 'add to normal store')\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger(`${type} can add to ${evt} store`)\n      let key = this.hashFnToKey(callback)\n      let [_store, size] = this.addToStore(this.normalStore, evt, key, callback, context, type)\n      this.normalStore = _store;\n      return size;\n    }\n    return false;\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} context the context the callback execute in\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null) {\n    let [_store, size] = this.addToStore(this.lazyStore, evt, this.toArray(payload), context)\n    this.lazyStore = _store;\n    return size;\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg];\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return genHaskKey(fn.toString()) + '';\n  }\n\n}\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport default function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n"],"names":["const","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","EventService","config","logger","this","keep","result","normalStore","Map","lazyStore","$on","evt","callback","context","validate","lazyStoreContent","takeFromStore","addToNormalStore","let","size","forEach","content","this$1","run","payload","ctx","$once","Array","from","$off","$only","added","has","l","$onlyOnce","$trigger","validateEvt","found","nStore","nSet","get","ctn","length","hasOnce","i","type","delete","addToLazyStore","$call","args","Reflect","apply","stores","store","$get","full","map","prototypeAccessors","$done","value","push","Error","toArray","storeName","addToStore","fnSet","Set","checkContentExist","add","set","filter","checkTypeInStore","evtName","all","list","t","key","hashFnToKey","_store","arg","isArray","obj","fn","toString","split","reduce","a","b","charCodeAt"],"mappings":"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"}