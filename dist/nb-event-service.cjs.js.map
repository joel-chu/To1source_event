{"version":3,"file":"nb-event-service.cjs.js","sources":["../src/store.js","../src/suspend.js","../src/store-service.js","../src/event-service.js","../src/hash-code.js"],"sourcesContent":["export const NB_EVENT_SERVICE_PRIVATE_STORE = new WeakMap()\nexport const NB_EVENT_SERVICE_PRIVATE_LAZY = new WeakMap()\n","// making all the functionality on it's own\n// import { WatchClass } from './watch'\n\nexport default class SuspendClass {\n\n  constructor() {\n    // suspend, release and queue\n    this.__suspend__ = null;\n    this.queueStore = new Set()\n    /*\n    this.watch('suspend', function(value, prop, oldValue) {\n      this.logger(`${prop} set from ${oldValue} to ${value}`)\n      // it means it set the suspend = true then release it\n      if (oldValue === true && value === false) {\n        // we want this happen after the return happens\n        setTimeout(() => {\n          this.release()\n        }, 1)\n      }\n      return value; // we need to return the value to store it\n    })\n    */\n  }\n\n  /**\n   * setter to set the suspend and check if it's boolean value\n   * @param {boolean} value to trigger\n   */\n  set $suspend(value) {\n    if (typeof value === 'boolean') {\n      const lastValue = this.__suspend__;\n      this.__suspend__ = value;\n      this.logger('($suspend)', `Change from ${lastValue} --> ${value}`)\n      if (lastValue === true && value === false) {\n        setTimeout(() => {\n          this.release()\n        }, 1)\n      }\n    } else {\n      throw new Error(`$suspend only accept Boolean value!`)\n    }\n  }\n\n  /**\n   * queuing call up when it's in suspend mode\n   * @param {any} value\n   * @return {Boolean} true when added or false when it's not\n   */\n  $queue(...args) {\n    if (this.__suspend__ === true) {\n      this.logger('($queue)', 'added to $queue', args)\n      // there shouldn't be any duplicate ...\n      this.queueStore.add(args)\n    }\n    return this.__suspend__;\n  }\n\n  /**\n   * a getter to get all the store queue\n   * @return {array} Set turn into Array before return\n   */\n  get $queues() {\n    let size = this.queueStore.size;\n    this.logger('($queues)', `size: ${size}`)\n    if (size > 0) {\n      return Array.from(this.queueStore)\n    }\n    return []\n  }\n\n  /**\n   * Release the queue\n   * @return {int} size if any\n   */\n  release() {\n    let size = this.queueStore.size\n    this.logger('(release)', `Release was called ${size}`)\n    if (size > 0) {\n      const queue = Array.from(this.queueStore)\n      this.queueStore.clear()\n      this.logger('queue', queue)\n      queue.forEach(args => {\n        this.logger(args)\n        Reflect.apply(this.$trigger, this, args)\n      })\n      this.logger(`Release size ${this.queueStore.size}`)\n    }\n  }\n}\n","// break up the main file because its getting way too long\nimport {\n  NB_EVENT_SERVICE_PRIVATE_STORE,\n  NB_EVENT_SERVICE_PRIVATE_LAZY\n} from './store'\nimport { hashCode2Str } from './hash-code'\nimport SuspendClass from './suspend'\n\nexport default class NbEventServiceBase extends SuspendClass {\n\n  constructor(config = {}) {\n    super()\n    if (config.logger && typeof config.logger === 'function') {\n      this.logger = config.logger;\n    }\n    this.keep = config.keep;\n    // for the $done setter\n    this.result = config.keep ? [] : null;\n    // we need to init the store first otherwise it could be a lot of checking later\n    this.normalStore = new Map()\n    this.lazyStore = new Map()\n  }\n\n  // for id if the instance is this class\n  get is() {\n    return 'nb-event-service'\n  }\n\n  /**\n   * validate the event name(s)\n   * @param {string[]} evt event name\n   * @return {boolean} true when OK\n   */\n  validateEvt(...evt) {\n    evt.forEach(e => {\n      if (typeof e !== 'string') {\n        this.logger('(validateEvt)', e)\n        throw new Error(`event name must be string type!`)\n      }\n    })\n    return true;\n  }\n\n  /**\n   * Simple quick check on the two main parameters\n   * @param {string} evt event name\n   * @param {function} callback function to call\n   * @return {boolean} true when OK\n   */\n  validate(evt, callback) {\n    if (this.validateEvt(evt)) {\n      if (typeof callback === 'function') {\n        return true;\n      }\n    }\n    throw new Error(`callback required to be function type!`)\n  }\n\n  /**\n   * Check if this type is correct or not added in V1.5.0\n   * @param {string} type for checking\n   * @return {boolean} true on OK\n   */\n  validateType(type) {\n    const types = ['on', 'only', 'once', 'onlyOnce']\n    return !!types.filter(t => type === t).length;\n  }\n\n  /**\n   * Run the callback\n   * @param {function} callback function to execute\n   * @param {array} payload for callback\n   * @param {object} ctx context or null\n   * @return {void} the result store in $done\n   */\n  run(callback, payload, ctx) {\n    this.logger('(run)', callback, payload, ctx)\n    this.$done = Reflect.apply(callback, ctx, this.toArray(payload))\n  }\n\n  /**\n   * Take the content out and remove it from store id by the name\n   * @param {string} evt event name\n   * @param {string} [storeName = lazyStore] name of store\n   * @return {object|boolean} content or false on not found\n   */\n  takeFromStore(evt, storeName = 'lazyStore') {\n    let store = this[storeName] // it could be empty at this point\n    if (store) {\n      this.logger('(takeFromStore)', storeName, store)\n      if (store.has(evt)) {\n        let content = store.get(evt)\n        this.logger('(takeFromStore)', `has ${evt}`, content)\n        store.delete(evt)\n        return content;\n      }\n      return false;\n    }\n    throw new Error(`${storeName} is not supported!`)\n  }\n\n  /**\n   * The add to store step is similar so make it generic for resuse\n   * @param {object} store which store to use\n   * @param {string} evt event name\n   * @param {spread} args because the lazy store and normal store store different things\n   * @return {array} store and the size of the store\n   */\n  addToStore(store, evt, ...args) {\n    let fnSet;\n    if (store.has(evt)) {\n      this.logger('(addToStore)', `${evt} existed`)\n      fnSet = store.get(evt)\n    } else {\n      this.logger('(addToStore)', `create new Set for ${evt}`)\n      // this is new\n      fnSet = new Set()\n    }\n    // lazy only store 2 items - this is not the case in V1.6.0 anymore\n    // we need to check the first parameter is string or not\n    if (args.length > 2) {\n      if (Array.isArray(args[0])) { // lazy store\n        // check if this type of this event already register in the lazy store\n        let [,,t] = args;\n        if (!this.checkTypeInLazyStore(evt, t)) {\n          fnSet.add(args)\n        }\n      } else {\n        if (!this.checkContentExist(args, fnSet)) {\n          this.logger('(addToStore)', `insert new`, args)\n          fnSet.add(args)\n        }\n      }\n    } else { // add straight to lazy store\n      fnSet.add(args)\n    }\n    store.set(evt, fnSet)\n    return [store, fnSet.size]\n  }\n\n  /**\n   * @param {array} args for compare\n   * @param {object} fnSet A Set to search from\n   * @return {boolean} true on exist\n   */\n  checkContentExist(args, fnSet) {\n    let list = Array.from(fnSet)\n    return !!list.filter(l => {\n      let [hash,] = l;\n      if (hash === args[0]) {\n        return true;\n      }\n      return false;\n    }).length;\n  }\n\n  /**\n   * get the existing type to make sure no mix type add to the same store\n   * @param {string} evtName event name\n   * @param {string} type the type to check\n   * @return {boolean} true you can add, false then you can't add this type\n   */\n  checkTypeInStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let all = this.$get(evtName, true)\n    if (all === false) {\n       // pristine it means you can add\n      return true;\n    }\n    // it should only have ONE type in ONE event store\n    return !all.filter(list => {\n      let [ ,,,t ] = list;\n      return type !== t;\n    }).length;\n  }\n\n  /**\n   * This is checking just the lazy store because the structure is different\n   * therefore we need to use a new method to check it\n   */\n  checkTypeInLazyStore(evtName, type) {\n    this.validateEvt(evtName, type)\n    let store = this.lazyStore.get(evtName)\n    this.logger('(checkTypeInLazyStore)', store)\n    if (store) {\n      return !!Array\n        .from(store)\n        .filter(l => {\n          let [,,t] = l;\n          return t !== type;\n        }).length\n    }\n    return false;\n  }\n\n  /**\n   * wrapper to re-use the addToStore,\n   * V1.3.0 add extra check to see if this type can add to this evt\n   * @param {string} evt event name\n   * @param {string} type on or once\n   * @param {function} callback function\n   * @param {object} context the context the function execute in or null\n   * @return {number} size of the store\n   */\n  addToNormalStore(evt, type, callback, context = null) {\n    this.logger('(addToNormalStore)', evt, type, 'try to add to normal store')\n    // @TODO we need to check the existing store for the type first!\n    if (this.checkTypeInStore(evt, type)) {\n      this.logger('(addToNormalStore)', `${type} can add to ${evt} normal store`)\n      let key = this.hashFnToKey(callback)\n      let args = [this.normalStore, evt, key, callback, context, type]\n      let [_store, size] = Reflect.apply(this.addToStore, this, args)\n      this.normalStore = _store;\n      return size;\n    }\n    return false;\n  }\n\n  /**\n   * Add to lazy store this get calls when the callback is not register yet\n   * so we only get a payload object or even nothing\n   * @param {string} evt event name\n   * @param {array} payload of arguments or empty if there is none\n   * @param {object} [context=null] the context the callback execute in\n   * @param {string} [type=false] register a type so no other type can add to this evt\n   * @return {number} size of the store\n   */\n  addToLazyStore(evt, payload = [], context = null, type = false) {\n    // this is add in V1.6.0\n    // when there is type then we will need to check if this already added in lazy store\n    // and no other type can add to this lazy store\n    let args = [this.lazyStore, evt, this.toArray(payload), context]\n    if (type) {\n      args.push(type)\n    }\n    let [_store, size] = Reflect.apply(this.addToStore, this, args)\n    this.lazyStore = _store;\n    return size;\n  }\n\n  /**\n   * make sure we store the argument correctly\n   * @param {*} arg could be array\n   * @return {array} make sured\n   */\n  toArray(arg) {\n    return Array.isArray(arg) ? arg : [arg];\n  }\n\n  /**\n   * setter to store the Set in private\n   * @param {object} obj a Set\n   */\n  set normalStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_STORE.set(this, obj)\n  }\n\n  /**\n   * @return {object} Set object\n   */\n  get normalStore() {\n    return NB_EVENT_SERVICE_PRIVATE_STORE.get(this)\n  }\n\n  /**\n   * setter to store the Set in lazy store\n   * @param {object} obj a Set\n   */\n  set lazyStore(obj) {\n    NB_EVENT_SERVICE_PRIVATE_LAZY.set(this , obj)\n  }\n\n  /**\n   * @return {object} the lazy store Set\n   */\n  get lazyStore() {\n    return NB_EVENT_SERVICE_PRIVATE_LAZY.get(this)\n  }\n\n  /**\n   * generate a hashKey to identify the function call\n   * The build-in store some how could store the same values!\n   * @param {function} fn the converted to string function\n   * @return {string} hashKey\n   */\n  hashFnToKey(fn) {\n    return hashCode2Str(fn.toString())\n  }\n}\n","// The top level\nimport NbStoreService from './store-service'\n// export\nexport default class EventService extends NbStoreService {\n  /**\n   * class constructor\n   */\n  constructor(config = {}) {\n    super(config)\n  }\n\n  /**\n   * logger function for overwrite\n   */\n  logger() {}\n\n  //////////////////////////\n  //    PUBLIC METHODS    //\n  //////////////////////////\n\n  /**\n   * Register your evt handler, note we don't check the type here,\n   * we expect you to be sensible and know what you are doing.\n   * @param {string} evt name of event\n   * @param {function} callback bind method --> if it's array or not\n   * @param {object} [context=null] to execute this call in\n   * @return {number} the size of the store\n   */\n  $on(evt , callback , context = null) {\n    const type = 'on';\n    this.validate(evt, callback)\n    // first need to check if this evt is in lazy store\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register first then call later\n    if (lazyStoreContent === false) {\n      this.logger('($on)', `${evt} callback is not in lazy store`)\n      // @TODO we need to check if there was other listener to this\n      // event and are they the same type then we could solve that\n      // register the different type to the same event name\n\n      return this.addToNormalStore(evt, type, callback, context)\n    }\n    this.logger('($on)', `${evt} found in lazy store`)\n    // this is when they call $trigger before register this callback\n    let size = 0;\n    lazyStoreContent.forEach(content => {\n      let [ payload, ctx, t ] = content;\n      if (t && t !== type) {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.logger(`($on)`, `call run on ${evt}`)\n      this.run(callback, payload, context || ctx)\n      size += this.addToNormalStore(evt, type, callback, context || ctx)\n    })\n    return size;\n  }\n\n  /**\n   * once only registered it once, there is no overwrite option here\n   * @NOTE change in v1.3.0 $once can add multiple listeners\n   *       but once the event fired, it will remove this event (see $only)\n   * @param {string} evt name\n   * @param {function} callback to execute\n   * @param {object} [context=null] the handler execute in\n   * @return {boolean} result\n   */\n  $once(evt , callback , context = null) {\n    this.validate(evt, callback)\n    const type = 'once';\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (lazyStoreContent === false) {\n      this.logger('($once)', `${evt} not in the lazy store`)\n      // v1.3.0 $once now allow to add multiple listeners\n      return this.addToNormalStore(evt, type, callback, context)\n    } else {\n      // now this is the tricky bit\n      // there is a potential bug here that cause by the developer\n      // if they call $trigger first, the lazy won't know it's a once call\n      // so if in the middle they register any call with the same evt name\n      // then this $once call will be fucked - add this to the documentation\n      this.logger('($once)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== type) {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.logger('($once)', `call run for ${evt}`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n  }\n\n  /**\n   * This one event can only bind one callbackback\n   * @param {string} evt event name\n   * @param {function} callback event handler\n   * @param {object} [context=null] the context the event handler execute in\n   * @return {boolean} true bind for first time, false already existed\n   */\n  $only(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'only';\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`($only)`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($only)', `${evt} found data in lazy store to execute`)\n      const list = Array.from(lazyStoreContent)\n      // $only allow to trigger this multiple time on the single handler\n      list.forEach( l => {\n        const [ payload, ctx, t ] = l;\n        if (t && t !== type) {\n          throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n        }\n        this.logger(`($only)`, `call run for ${evt}`)\n        this.run(callback, payload, context || ctx)\n      })\n    }\n    return added;\n  }\n\n  /**\n   * $only + $once this is because I found a very subtile bug when we pass a\n   * resolver, rejecter - and it never fire because that's OLD added in v1.4.0\n   * @param {string} evt event name\n   * @param {function} callback to call later\n   * @param {object} [context=null] exeucte context\n   * @return {void}\n   */\n  $onlyOnce(evt, callback, context = null) {\n    this.validate(evt, callback)\n    const type = 'onlyOnce';\n    let added = false;\n    let lazyStoreContent = this.takeFromStore(evt)\n    // this is normal register before call $trigger\n    let nStore = this.normalStore;\n    if (!nStore.has(evt)) {\n      this.logger(`($onlyOnce)`, `${evt} add to store`)\n      added = this.addToNormalStore(evt, type, callback, context)\n    }\n    if (lazyStoreContent !== false) {\n      // there are data store in lazy store\n      this.logger('($onlyOnce)', lazyStoreContent)\n      const list = Array.from(lazyStoreContent)\n      // should never have more than 1\n      const [ payload, ctx, t ] = list[0]\n      if (t && t !== 'onlyOnce') {\n        throw new Error(`You are trying to register an event already been taken by other type: ${t}`)\n      }\n      this.logger(`($onlyOnce)`, `call run for ${evt}`)\n      this.run(callback, payload, context || ctx)\n      // remove this evt from store\n      this.$off(evt)\n    }\n    return added;\n  }\n\n  /**\n   * This is a shorthand of $off + $on added in V1.5.0\n   * @param {string} evt event name\n   * @param {function} callback to exeucte\n   * @param {object} [context = null] or pass a string as type\n   * @param {string} [type=on] what type of method to replace\n   * @return {}\n   */\n  $replace(evt, callback, context = null, type = 'on') {\n    if (this.validateType(type)) {\n      this.$off(evt)\n      let method = this['$' + type]\n      this.logger(`($replace)`, evt, callback)\n      return Reflect.apply(method, this, [evt, callback, context])\n    }\n    throw new Error(`${type} is not supported!`)\n  }\n\n  /**\n   * trigger the event\n   * @param {string} evt name NOT allow array anymore!\n   * @param {mixed} [payload = []] pass to fn\n   * @param {object|string} [context = null] overwrite what stored\n   * @param {string} [type=false] if pass this then we need to add type to store too\n   * @return {number} if it has been execute how many times\n   */\n  $trigger(evt , payload = [] , context = null, type = false) {\n    this.validateEvt(evt)\n    let found = 0;\n    // first check the normal store\n    let nStore = this.normalStore;\n    this.logger('($trigger)', 'normalStore', nStore)\n    if (nStore.has(evt)) {\n      // @1.8.0 to add the suspend queue\n      let added = this.$queue(evt, payload, context, type)\n      this.logger('($trigger)', evt, 'found; add to queue: ', added)\n      if (added === true) {\n        this.logger('($trigger)', evt, 'not executed. Exit now.')\n        return false; // not executed\n      }\n      let nSet = Array.from(nStore.get(evt))\n      let ctn = nSet.length;\n      let hasOnce = false;\n      let hasOnly = false;\n      for (let i=0; i < ctn; ++i) {\n        ++found;\n        // this.logger('found', found)\n        let [ _, callback, ctx, type ] = nSet[i]\n        this.logger(`($trigger)`, `call run for ${evt}`)\n        this.run(callback, payload, context || ctx)\n        if (type === 'once' || type === 'onlyOnce') {\n          hasOnce = true;\n        }\n      }\n      if (hasOnce) {\n        nStore.delete(evt)\n      }\n      return found;\n    }\n    // now this is not register yet\n    this.addToLazyStore(evt, payload, context, type)\n    return found;\n  }\n\n  /**\n   * this is an alias to the $trigger\n   * @NOTE breaking change in V1.6.0 we swap the parameter aroun\n   * @NOTE breaking change: v1.9.1 it return an function to accept the params as spread\n   * @param {string} evt event name\n   * @param {string} type of call\n   * @param {object} context what context callback execute in\n   * @return {*} from $trigger\n   */\n  $call(evt, type = false, context = null) {\n    const ctx = this\n    return (...args) => {\n      let _args = [evt, args, context, type]\n      return Reflect.apply(ctx.$trigger, ctx, _args)\n    }\n  }\n\n  /**\n   * remove the evt from all the stores\n   * @param {string} evt name\n   * @return {boolean} true actually delete something\n   */\n  $off(evt) {\n    this.validateEvt(evt)\n    let stores = [ this.lazyStore, this.normalStore ]\n    let found = false;\n    stores.forEach(store => {\n      if (store.has(evt)) {\n        found = true;\n        this.logger('($off)', evt)\n        store.delete(evt)\n      }\n    })\n    return found;\n  }\n\n  /**\n   * return all the listener from the event\n   * @param {string} evtName event name\n   * @param {boolean} [full=false] if true then return the entire content\n   * @return {array|boolean} listerner(s) or false when not found\n   */\n  $get(evt, full = false) {\n    this.validateEvt(evt)\n    let store = this.normalStore;\n    if (store.has(evt)) {\n      return Array\n        .from(store.get(evt))\n        .map( l => {\n          if (full) {\n            return l;\n          }\n          let [key, callback, ] = l;\n          return callback;\n        })\n    }\n    return false;\n  }\n\n  /**\n   * store the return result from the run\n   * @param {*} value whatever return from callback\n   */\n  set $done(value) {\n    this.logger('($done)', 'value: ', value)\n    if (this.keep) {\n      this.result.push(value)\n    } else {\n      this.result = value;\n    }\n  }\n\n  /**\n   * @TODO is there any real use with the keep prop?\n   * getter for $done\n   * @return {*} whatever last store result\n   */\n  get $done() {\n    if (this.keep) {\n      this.logger('(get $done)', this.result)\n      return this.result[this.result.length - 1]\n    }\n    return this.result;\n  }\n\n\n}\n","/**\n * generate a 32bit hash based on the function.toString()\n * _from http://stackoverflow.com/questions/7616461/generate-a-hash-_from-string-in-javascript-jquery\n * @param {string} s the converted to string function\n * @return {string} the hashed function string\n */\nexport function hashCode(s) {\n\treturn s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0)\n}\n// wrapper to make sure it string \nexport function hashCode2Str(s) {\n  return hashCode(s) + ''\n}\n"],"names":["const","NB_EVENT_SERVICE_PRIVATE_STORE","WeakMap","NB_EVENT_SERVICE_PRIVATE_LAZY","SuspendClass","this","__suspend__","queueStore","Set","prototypeAccessors","$suspend","value","Error","lastValue","logger","setTimeout","this$1","release","$queue","args","add","$queues","size","Array","from","queue","clear","forEach","Reflect","apply","$trigger","EventService","config","super","$on","evt","callback","context","validate","let","lazyStoreContent","takeFromStore","addToNormalStore","content","t","run","payload","ctx","$once","normalStore","$off","$only","added","has","l","$onlyOnce","$replace","type","validateType","method","validateEvt","found","nStore","nSet","get","ctn","length","hasOnce","i","delete","addToLazyStore","$call","_args","stores","lazyStore","store","$get","full","map","$done","keep","result","push","Map","is","e","filter","toArray","storeName","addToStore","fnSet","isArray","checkTypeInLazyStore","checkContentExist","set","checkTypeInStore","evtName","all","list","key","hashFnToKey","_store","arg","obj","fn","s","split","reduce","a","b","charCodeAt","hashCode","toString"],"mappings":"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"}